<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="测试计划" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">D:\JMeter\mysql-connector-java-5.1.45\mysql-connector-java-5.1.45-bin.jar,D:\JMeter\poi-3.15\batik-all-1.7.jar,D:\JMeter\poi-3.15\poi-3.15.jar,D:\JMeter\poi-3.15\poi-examples-3.15.jar,D:\JMeter\poi-3.15\poi-excelant-3.15.jar,D:\JMeter\poi-3.15\poi-ooxml-3.15.jar,D:\JMeter\poi-3.15\poi-ooxml-schemas-3.15.jar,D:\JMeter\poi-3.15\poi-scratchpad-3.15.jar,D:\JMeter\poi-3.15\xml-apis-ext.jar,D:\JMeter\poi-3.15\ooxml-lib\curvesapi-1.04.jar,D:\JMeter\poi-3.15\ooxml-lib\xmlbeans-2.6.0.jar,D:\JMeter\poi-3.15\lib\commons-codec-1.10.jar,D:\JMeter\poi-3.15\lib\commons-collections4-4.1.jar,D:\JMeter\poi-3.15\lib\commons-logging-1.2.jar,D:\JMeter\poi-3.15\lib\junit-4.12.jar,D:\JMeter\poi-3.15\lib\log4j-1.2.17.jar</stringProp>
    </TestPlan>
    <hashTree>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP请求默认值" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">huat.dcfservice.com</stringProp>
        <stringProp name="HTTPSampler.port">80</stringProp>
        <stringProp name="HTTPSampler.protocol">HTTP</stringProp>
        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
        <stringProp name="dataSource">MySQL</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="dbUrl">jdbc:mysql://uat.db.dcfservice.com/?allowMultiQueries=true</stringProp>
        <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
        <stringProp name="username">us_uat_read</stringProp>
        <stringProp name="password">9umTIB3a7bfJkQMa</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="corpname" elementType="Argument">
            <stringProp name="Argument.name">corpname</stringProp>
            <stringProp name="Argument.value">${__time(YMD,)}核心企业</stringProp>
            <stringProp name="Argument.desc">核心企业名称</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="corp_mobile" elementType="Argument">
            <stringProp name="Argument.name">corp_mobile</stringProp>
            <stringProp name="Argument.value">${__Random(13810000000,13899999999,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="orgname" elementType="Argument">
            <stringProp name="Argument.name">orgname</stringProp>
            <stringProp name="Argument.value">${__time(YMD,)}商业保理有限公司</stringProp>
            <stringProp name="Argument.desc">机构名称</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="org_mobile" elementType="Argument">
            <stringProp name="Argument.name">org_mobile</stringProp>
            <stringProp name="Argument.value">${__Random(13710000000,13799999999,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="chainname" elementType="Argument">
            <stringProp name="Argument.name">chainname</stringProp>
            <stringProp name="Argument.value">${__time(YMD,)}测试链属1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">链属企业名称</stringProp>
          </elementProp>
          <elementProp name="chain_mobile" elementType="Argument">
            <stringProp name="Argument.name">chain_mobile</stringProp>
            <stringProp name="Argument.value">${__Random(13710000000,13799999999,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">test1234</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="运营端登录" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="运营端登录" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;corpName&quot;:&quot;鼎程&quot;,&#xd;
	&quot;userName&quot;:&quot;晏家婷&quot;,&#xd;
	&quot;password&quot;:&quot;test1234&quot;,&#xd;
	&quot;captchaKey&quot;:&quot;&quot;,&#xd;
	&quot;captcha&quot;:&quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">HTTP</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/user/v1/login/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">COOKIE_tk</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;tk&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1395028745">{&quot;userKey&quot;:&quot;U1201801201542550093&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置运营端登录cookie为全局变量" enabled="true">
          <stringProp name="BeanShellSampler.query">${__setProperty(uat_cookie,${COOKIE_tk},)};</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="新建产品" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">28</stringProp>
        <stringProp name="ThreadGroup.delay">2</stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="新建N+1产品" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="lendingTarget" elementType="Argument">
              <stringProp name="Argument.name">lendingTarget</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;放款对象&quot;: &quot;0:卖家;1:买家&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanApplicant" elementType="Argument">
              <stringProp name="Argument.name">loanApplicant</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;融资申请方&quot;: &quot;0:卖家;1:买家&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dataProvider" elementType="Argument">
              <stringProp name="Argument.name">dataProvider</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.desc">&quot;数据提交方&quot;: &quot;0:卖家;1:买家&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dataConfirmMethod" elementType="Argument">
              <stringProp name="Argument.name">dataConfirmMethod</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;数据确认方式&quot;: &quot;0:逐笔;1:一次性电子确认;2:一次性纸质确认&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="writeOffOrder" elementType="Argument">
              <stringProp name="Argument.name">writeOffOrder</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;核销顺序&quot;: &quot;0:先息费后本金;1:先本金后息费&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="productname" elementType="Argument">
              <stringProp name="Argument.name">productname</stringProp>
              <stringProp name="Argument.value">N%2b1产品逐笔-按账期-先息后本${__time(/1000,)}</stringProp>
              <stringProp name="Argument.desc">产品名称</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="tradeTradeOff" elementType="Argument">
              <stringProp name="Argument.name">tradeTradeOff</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;贸易结算方式&quot;: &quot;0:逐笔;1:账单&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="tradePeriodConfirm" elementType="Argument">
              <stringProp name="Argument.name">tradePeriodConfirm</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;到期日确认方式&quot;: &quot;0:按账期;1:按流水&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="prepayopen" elementType="Argument">
              <stringProp name="Argument.name">prepayopen</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.desc"> &quot;false, true&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="prepayseller" elementType="Argument">
              <stringProp name="Argument.name">prepayseller</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.desc"> &quot;false, true&quot;;若开启预付prepaybuyer和prepayseller二选一true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="prepaybuyer" elementType="Argument">
              <stringProp name="Argument.name">prepaybuyer</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.desc"> &quot;false, true&quot;;若开启预付prepaybuyer和prepayseller二选一true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="payRate" elementType="Argument">
              <stringProp name="Argument.name">payRate</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">&quot;支付比率&quot;: &quot;20%&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">N+1产品逐笔-逐笔-按账期-先息后本</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="新建1+N产品" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="lendingTarget" elementType="Argument">
              <stringProp name="Argument.name">lendingTarget</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;放款对象&quot;: &quot;0:卖家;1:买家&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanApplicant" elementType="Argument">
              <stringProp name="Argument.name">loanApplicant</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;融资申请方&quot;: &quot;0:卖家;1:买家&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dataProvider" elementType="Argument">
              <stringProp name="Argument.name">dataProvider</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;数据提交方&quot;: &quot;0:卖家;1:买家&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dataConfirmMethod" elementType="Argument">
              <stringProp name="Argument.name">dataConfirmMethod</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.desc">&quot;数据确认方式&quot;: &quot;0:逐笔;1:一次性电子确认;2:一次性纸质确认&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="writeOffOrder" elementType="Argument">
              <stringProp name="Argument.name">writeOffOrder</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.desc">&quot;核销顺序&quot;: &quot;0:先息费后本金;1:先本金后息费&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="productname" elementType="Argument">
              <stringProp name="Argument.name">productname</stringProp>
              <stringProp name="Argument.value">1%2bN产品逐笔-按账期-一次性纸质确认-先本后息${__time(/1000,)}</stringProp>
              <stringProp name="Argument.desc">产品名称</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="tradeTradeOff" elementType="Argument">
              <stringProp name="Argument.name">tradeTradeOff</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;贸易结算方式&quot;: &quot;0:逐笔;1:账单&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="tradePeriodConfirm" elementType="Argument">
              <stringProp name="Argument.name">tradePeriodConfirm</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;到期日确认方式&quot;: &quot;0:按账期;1:按流水&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="prepayopen" elementType="Argument">
              <stringProp name="Argument.name">prepayopen</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.desc"> &quot;false, true&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="prepayseller" elementType="Argument">
              <stringProp name="Argument.name">prepayseller</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.desc"> &quot;false, true&quot;;若开启预付prepaybuyer和prepayseller二选一true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="prepaybuyer" elementType="Argument">
              <stringProp name="Argument.name">prepaybuyer</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.desc"> &quot;false, true&quot;;若开启预付prepaybuyer和prepayseller二选一true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="payRate" elementType="Argument">
              <stringProp name="Argument.name">payRate</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">&quot;支付比率&quot;: &quot;20%&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">1+N产品逐笔-按账期-一次性纸质确认-先本后息</stringProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="新建预付产品" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="lendingTarget" elementType="Argument">
              <stringProp name="Argument.name">lendingTarget</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;放款对象&quot;: &quot;0:卖家;1:买家&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanApplicant" elementType="Argument">
              <stringProp name="Argument.name">loanApplicant</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;融资申请方&quot;: &quot;0:卖家;1:买家&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dataProvider" elementType="Argument">
              <stringProp name="Argument.name">dataProvider</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.desc">&quot;数据提交方&quot;: &quot;0:卖家;1:买家&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dataConfirmMethod" elementType="Argument">
              <stringProp name="Argument.name">dataConfirmMethod</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;数据确认方式&quot;: &quot;0:逐笔;1:一次性电子确认;2:一次性纸质确认&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="writeOffOrder" elementType="Argument">
              <stringProp name="Argument.name">writeOffOrder</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;核销顺序&quot;: &quot;0:先息费后本金;1:先本金后息费&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="productname" elementType="Argument">
              <stringProp name="Argument.name">productname</stringProp>
              <stringProp name="Argument.value">预付N%2b1产品逐笔-按账期-先息后本${__time(/1000,)}</stringProp>
              <stringProp name="Argument.desc">产品名称</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="tradeTradeOff" elementType="Argument">
              <stringProp name="Argument.name">tradeTradeOff</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;贸易结算方式&quot;: &quot;0:逐笔;1:账单&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="tradePeriodConfirm" elementType="Argument">
              <stringProp name="Argument.name">tradePeriodConfirm</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;到期日确认方式&quot;: &quot;0:按账期;1:按流水&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="prepayAccountseller" elementType="Argument">
              <stringProp name="Argument.name">prepayAccountseller</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.desc"> &quot;false, true&quot;;buyer和seller二选一true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="prepayAccountbuyer" elementType="Argument">
              <stringProp name="Argument.name">prepayAccountbuyer</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.desc"> &quot;false, true&quot;;buyer和seller二选一true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cashseller" elementType="Argument">
              <stringProp name="Argument.name">cashseller</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.desc"> &quot;false, true&quot;;buyer和seller二选一true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cashbuyer" elementType="Argument">
              <stringProp name="Argument.name">cashbuyer</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.desc"> &quot;false, true&quot;;buyer和seller二选一true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="prepayseller" elementType="Argument">
              <stringProp name="Argument.name">prepayseller</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.desc"> &quot;false, true&quot;;buyer和seller二选一true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="prepaybuyer" elementType="Argument">
              <stringProp name="Argument.name">prepaybuyer</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.desc"> &quot;false, true&quot;;buyer和seller二选一true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="prepayopen" elementType="Argument">
              <stringProp name="Argument.name">prepayopen</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.desc"> &quot;false, true&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="payBase" elementType="Argument">
              <stringProp name="Argument.name">payBase</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.desc">&quot;支付基数&quot;:  &quot;0 &quot;: &quot;按额度 &quot;, &quot;1 &quot;: &quot;按融资金额 &quot;, &quot;2 &quot;: &quot;按单据金额 &quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="payRate" elementType="Argument">
              <stringProp name="Argument.name">payRate</stringProp>
              <stringProp name="Argument.value">20</stringProp>
              <stringProp name="Argument.desc">&quot;支付比率&quot;: &quot;20%&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">预付N+1产品逐笔-按账期-先息后本</stringProp>
        </Arguments>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="标准产品" enabled="true">
          <stringProp name="IfController.condition">${prepayopen} == false</stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="新建产品" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="api" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">/v1/product/create</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">api</stringProp>
                </elementProp>
                <elementProp name="product_input" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{ 	&quot;lendingTarget&quot;: &quot;${lendingTarget}&quot;, 	&quot;loanApplicant&quot;: &quot;${loanApplicant}&quot;, 	&quot;dataProvider&quot;: &quot;${dataProvider}&quot;, 	&quot;dataConfirmMethod&quot;: &quot;${dataConfirmMethod}&quot;, 	&quot;writeOffOrder&quot;: &quot;${writeOffOrder}&quot;, 	&quot;name&quot;: &quot;${productname}&quot;, 	&quot;productConfig&quot;: { 		&quot;tradePrincipalCredit&quot;: { 			&quot;seller&quot;: false, 			&quot;buyer&quot;: false 		}, 		&quot;tradeCapital&quot;: { 			&quot;prepayAccount&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;cash&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;billReceivable&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;accountReceivable&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;inventory&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;accountInAdvance&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;accountPayable&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;billPayable&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			} 		}, 		&quot;nonTradeCapital&quot;: { 			&quot;prepayAccount&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;cash&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;billReceivable&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;accountReceivable&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;inventory&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;asset&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;stock&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			} 		}, 		&quot;tradeTradeOff&quot;: &quot;${tradeTradeOff}&quot;, 		&quot;tradePeriodConfirm&quot;: &quot;${tradePeriodConfirm}&quot;, 		&quot;loanPrincipalCredit&quot;: { 			&quot;seller&quot;: false, 			&quot;buyer&quot;: false 		}, 		&quot;loanTradeCapital&quot;: { 			&quot;prepayAccount&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;billReceivable&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;accountReceivable&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;inventory&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			} 		}, 		&quot;loanNonTradeCapital&quot;: { 			&quot;prepayAccount&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;cash&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;billReceivable&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;accountReceivable&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;inventory&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;asset&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;stock&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;prePay&quot;: { 				&quot;target&quot;: { 					&quot;seller&quot;: ${prepayseller}, 					&quot;buyer&quot;: ${prepaybuyer} 				}, 				&quot;open&quot;: ${prepayopen}, 				&quot;payRate&quot;: &quot;${payRate}&quot; 			} 		}, 		&quot;thirdPartyGuarantees&quot;: [] 	} }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">product_input</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v1/product/create</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
              <collectionProp name="CookieManager.cookies">
                <elementProp name="tk" elementType="Cookie" testname="tk">
                  <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                  <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                  <stringProp name="Cookie.path">/</stringProp>
                  <boolProp name="Cookie.secure">false</boolProp>
                  <longProp name="Cookie.expires">0</longProp>
                  <boolProp name="Cookie.path_specified">true</boolProp>
                  <boolProp name="Cookie.domain_specified">true</boolProp>
                </elementProp>
              </collectionProp>
              <boolProp name="CookieManager.clearEachIteration">false</boolProp>
            </CookieManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-824124102">&quot;ret&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">newproduct</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;result&quot;:(.\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">${__setProperty(newproduct1,${newproduct},)}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="预付产品" enabled="true">
          <stringProp name="IfController.condition">${prepayopen}

</stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="新建预付产品" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="api" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">/v1/product/create</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">api</stringProp>
                </elementProp>
                <elementProp name="product_input" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{ 	&quot;lendingTarget&quot;: &quot;${lendingTarget}&quot;, 	&quot;loanApplicant&quot;: &quot;${loanApplicant}&quot;, 	&quot;dataProvider&quot;: &quot;${dataProvider}&quot;, 	&quot;dataConfirmMethod&quot;: &quot;${dataConfirmMethod}&quot;, 	&quot;writeOffOrder&quot;: &quot;${writeOffOrder}&quot;, 	&quot;name&quot;: &quot;${productname}&quot;, 	&quot;productConfig&quot;: { 		&quot;tradePrincipalCredit&quot;: { 			&quot;seller&quot;: false, 			&quot;buyer&quot;: false 		}, 		&quot;tradeCapital&quot;: { 			&quot;prepayAccount&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;cash&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;billReceivable&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;accountReceivable&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;inventory&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;accountInAdvance&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;accountPayable&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;billPayable&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			} 		}, 		&quot;nonTradeCapital&quot;: { 			&quot;prepayAccount&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;cash&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;billReceivable&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;accountReceivable&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;inventory&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;asset&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;stock&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			} 		}, 		&quot;tradeTradeOff&quot;: &quot;${tradeTradeOff}&quot;, 		&quot;tradePeriodConfirm&quot;: &quot;${tradePeriodConfirm}&quot;, 		&quot;loanPrincipalCredit&quot;: { 			&quot;seller&quot;: false, 			&quot;buyer&quot;: false 		}, 		&quot;loanTradeCapital&quot;: { 			&quot;prepayAccount&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;billReceivable&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;accountReceivable&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;inventory&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			} 		}, 		&quot;loanNonTradeCapital&quot;: { 			&quot;prepayAccount&quot;: { 				&quot;seller&quot;: ${prepayAccountseller}, 				&quot;buyer&quot;: ${prepayAccountbuyer} 			}, 			&quot;cash&quot;: { 				&quot;seller&quot;: ${cashseller}, 				&quot;buyer&quot;:${cashbuyer} 			}, 			&quot;billReceivable&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;accountReceivable&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;inventory&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;asset&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;stock&quot;: { 				&quot;seller&quot;: false, 				&quot;buyer&quot;: false 			}, 			&quot;prePay&quot;: { 				&quot;target&quot;: { 					&quot;seller&quot;: ${prepayseller}, 					&quot;buyer&quot;: ${prepaybuyer} 				}, 				&quot;open&quot;: ${prepayopen}, 				  &quot;payBase&quot;: &quot;${payBase}&quot;, 				&quot;payRate&quot;: &quot;${payRate}&quot; 			} 		}, 		&quot;thirdPartyGuarantees&quot;: [] 	} }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">product_input</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v1/product/create</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
              <collectionProp name="CookieManager.cookies">
                <elementProp name="tk" elementType="Cookie" testname="tk">
                  <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                  <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                  <stringProp name="Cookie.path">/</stringProp>
                  <boolProp name="Cookie.secure">false</boolProp>
                  <longProp name="Cookie.expires">0</longProp>
                  <boolProp name="Cookie.path_specified">true</boolProp>
                  <boolProp name="Cookie.domain_specified">true</boolProp>
                </elementProp>
              </collectionProp>
              <boolProp name="CookieManager.clearEachIteration">false</boolProp>
            </CookieManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-824124102">&quot;ret&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">newproduct</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;result&quot;:(.\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">${__setProperty(newproduct1,${newproduct},)}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="启用产品" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="api" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">/v1/product/setstate</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">api</stringProp>
              </elementProp>
              <elementProp name="id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__property(newproduct1)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">id</stringProp>
              </elementProp>
              <elementProp name="state" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">state</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v1/product/setstate</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
              <elementProp name="newproduct" elementType="Cookie" testname="newproduct">
                <stringProp name="Cookie.value">${COOKIE_newproduct}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          </CookieManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">product</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;result&quot;:(.\d+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">${__setProperty(product1,${product},)}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="新建机构工作方式" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">28</stringProp>
        <stringProp name="ThreadGroup.delay">2</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="1+N机构工作方式" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="institutionProcessModelname" elementType="Argument">
              <stringProp name="Argument.name">institutionProcessModelname</stringProp>
              <stringProp name="Argument.value">1%2bN机构工作方式${__time(/1000,)}</stringProp>
              <stringProp name="Argument.desc">机构工作方式名称</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="microContractTemplateName" elementType="Argument">
              <stringProp name="Argument.name">microContractTemplateName</stringProp>
              <stringProp name="Argument.value">%e5%be%ae%e5%90%88%e5%90%8c-1%2bN</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">微合同名称</stringProp>
            </elementProp>
            <elementProp name="microContractTemplate" elementType="Argument">
              <stringProp name="Argument.name">microContractTemplate</stringProp>
              <stringProp name="Argument.value">D:\JMeter\attachment\微合同-1+N.txt</stringProp>
              <stringProp name="Argument.desc">微合同地址</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="N+1机构工作方式" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="institutionProcessModelname" elementType="Argument">
              <stringProp name="Argument.name">institutionProcessModelname</stringProp>
              <stringProp name="Argument.value">N%2b1机构工作方式${__time(/1000,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">机构工作方式名称</stringProp>
            </elementProp>
            <elementProp name="microContractTemplateName" elementType="Argument">
              <stringProp name="Argument.name">microContractTemplateName</stringProp>
              <stringProp name="Argument.value">微合同-N+1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">微合同名称</stringProp>
            </elementProp>
            <elementProp name="microContractTemplate" elementType="Argument">
              <stringProp name="Argument.name">microContractTemplate</stringProp>
              <stringProp name="Argument.value">D:\JMeter\attachment\微合同-N+1.txt</stringProp>
              <stringProp name="Argument.desc">微合同地址</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="机构工作方式通用变量" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="receivablesagreement" elementType="Argument">
              <stringProp name="Argument.name">receivablesagreement</stringProp>
              <stringProp name="Argument.value">D:\JMeter\attachment\应收账款转让通知书（链属VS核心买家）20160726(带参数).pdf</stringProp>
              <stringProp name="Argument.desc">应收账款协议地址</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="receivablesagreement_Name" elementType="Argument">
              <stringProp name="Argument.name">receivablesagreement_Name</stringProp>
              <stringProp name="Argument.value">应收账款转让通知书</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">应收账款协议名称</stringProp>
            </elementProp>
            <elementProp name="financingagreement" elementType="Argument">
              <stringProp name="Argument.name">financingagreement</stringProp>
              <stringProp name="Argument.value">D:\JMeter\attachment\N+1保理融资协议-有追（机构vs链属）20160810精简版（带变量）.pdf</stringProp>
              <stringProp name="Argument.desc">保理融资协议地址</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="financingagreement_Name" elementType="Argument">
              <stringProp name="Argument.name">financingagreement_Name</stringProp>
              <stringProp name="Argument.value">保理融资协议</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">保理融资协议名称</stringProp>
            </elementProp>
            <elementProp name="operationDoc" elementType="Argument">
              <stringProp name="Argument.name">operationDoc</stringProp>
              <stringProp name="Argument.value">D:\JMeter\attachment\操作说明文档.pdf</stringProp>
              <stringProp name="Argument.desc">操作说明地址</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="operationDocName" elementType="Argument">
              <stringProp name="Argument.name">operationDocName</stringProp>
              <stringProp name="Argument.value">操作说明</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">操作说明名称</stringProp>
            </elementProp>
            <elementProp name="applyagreement" elementType="Argument">
              <stringProp name="Argument.name">applyagreement</stringProp>
              <stringProp name="Argument.value">D:\JMeter\attachment\H5申请融资协议.pdf</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">申请融资协议</stringProp>
            </elementProp>
            <elementProp name="applyagreement_Name" elementType="Argument">
              <stringProp name="Argument.name">applyagreement_Name</stringProp>
              <stringProp name="Argument.value">H5申请融资协议</stringProp>
              <stringProp name="Argument.desc">申请融资协议名称</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="financingapplytemolate" elementType="Argument">
              <stringProp name="Argument.name">financingapplytemolate</stringProp>
              <stringProp name="Argument.value">D:\JMeter\attachment\交易流水模板.xlsx</stringProp>
              <stringProp name="Argument.desc">融资申请模板</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="机构工作方式-上传应收账款转让通知书" enabled="true">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${receivablesagreement}" elementType="HTTPFileArg">
                <stringProp name="File.path">${receivablesagreement}</stringProp>
                <stringProp name="File.paramname">files[]</stringProp>
                <stringProp name="File.mimetype">application/pdf</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="Content-Disposition: form-data; name=&quot;clearing&quot;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Content-Disposition: form-data; name=&quot;clearing&quot;</stringProp>
              </elementProp>
              <elementProp name="Content-Disposition: form-data; name=&quot;finalPayment&quot;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Content-Disposition: form-data; name=&quot;finalPayment&quot;</stringProp>
              </elementProp>
              <elementProp name="Content-Disposition: form-data; name=&quot;integrationType&quot;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Content-Disposition: form-data; name=&quot;integrationType&quot;</stringProp>
              </elementProp>
              <elementProp name="Content-Disposition: form-data; name=&quot;signMethod&quot;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Content-Disposition: form-data; name=&quot;signMethod&quot;</stringProp>
              </elementProp>
              <elementProp name="Content-Disposition: form-data; name=&quot;isPackage&quot;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Content-Disposition: form-data; name=&quot;isPackage&quot;</stringProp>
              </elementProp>
              <elementProp name="Content-Disposition: form-data; name=&quot;isFinancialReport&quot;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Content-Disposition: form-data; name=&quot;isFinancialReport&quot;</stringProp>
              </elementProp>
              <elementProp name="Content-Disposition: form-data; name=&quot;isAccountActivation&quot;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Content-Disposition: form-data; name=&quot;isAccountActivation&quot;</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v1/attachment/add</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value"> multipart/form-data</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">receivablesagreement_Id</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;result&quot;:&quot;(.\d+)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-824124102">&quot;ret&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="机构工作方式-上传保理融资协议" enabled="true">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${financingagreement}" elementType="HTTPFileArg">
                <stringProp name="File.path">${financingagreement}</stringProp>
                <stringProp name="File.paramname">files[]</stringProp>
                <stringProp name="File.mimetype">application/pdf</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="clearing" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">clearing</stringProp>
              </elementProp>
              <elementProp name="finalPayment" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">finalPayment</stringProp>
              </elementProp>
              <elementProp name="integrationType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">integrationType</stringProp>
              </elementProp>
              <elementProp name="signMethod" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">signMethod</stringProp>
              </elementProp>
              <elementProp name="isPackage" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">isPackage</stringProp>
              </elementProp>
              <elementProp name="isFinancialReport" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">isFinancialReport</stringProp>
              </elementProp>
              <elementProp name="isAccountActivation" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">isAccountActivation</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">GBK</stringProp>
          <stringProp name="HTTPSampler.path">/v1/attachment/add</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">financingagreement_Id</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;result&quot;:&quot;(.\d+)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-824124102">&quot;ret&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="机构工作方式-上传H5申请融资协议" enabled="true">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${applyagreement}" elementType="HTTPFileArg">
                <stringProp name="File.path">${applyagreement}</stringProp>
                <stringProp name="File.paramname">files[]</stringProp>
                <stringProp name="File.mimetype">application/pdf</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="clearing" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">clearing</stringProp>
              </elementProp>
              <elementProp name="finalPayment" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">finalPayment</stringProp>
              </elementProp>
              <elementProp name="integrationType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">integrationType</stringProp>
              </elementProp>
              <elementProp name="signMethod" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">signMethod</stringProp>
              </elementProp>
              <elementProp name="isPackage" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">isPackage</stringProp>
              </elementProp>
              <elementProp name="isFinancialReport" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">isFinancialReport</stringProp>
              </elementProp>
              <elementProp name="isAccountActivation" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">isAccountActivation</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/v1/attachment/add</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">applyagreement_Id</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;result&quot;:&quot;(.\d+)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-824124102">&quot;ret&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers"/>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="机构工作方式-上传操作说明" enabled="true">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${operationDoc}" elementType="HTTPFileArg">
                <stringProp name="File.path">${operationDoc}</stringProp>
                <stringProp name="File.paramname">files[]</stringProp>
                <stringProp name="File.mimetype">application/pdf</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="Content-Disposition: form-data; name=&quot;clearing&quot;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Content-Disposition: form-data; name=&quot;clearing&quot;</stringProp>
              </elementProp>
              <elementProp name="Content-Disposition: form-data; name=&quot;finalPayment&quot;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Content-Disposition: form-data; name=&quot;finalPayment&quot;</stringProp>
              </elementProp>
              <elementProp name="Content-Disposition: form-data; name=&quot;integrationType&quot;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Content-Disposition: form-data; name=&quot;integrationType&quot;</stringProp>
              </elementProp>
              <elementProp name="Content-Disposition: form-data; name=&quot;signMethod&quot;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Content-Disposition: form-data; name=&quot;signMethod&quot;</stringProp>
              </elementProp>
              <elementProp name="Content-Disposition: form-data; name=&quot;isPackage&quot;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Content-Disposition: form-data; name=&quot;isPackage&quot;</stringProp>
              </elementProp>
              <elementProp name="Content-Disposition: form-data; name=&quot;isFinancialReport&quot;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Content-Disposition: form-data; name=&quot;isFinancialReport&quot;</stringProp>
              </elementProp>
              <elementProp name="Content-Disposition: form-data; name=&quot;isAccountActivation&quot;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Content-Disposition: form-data; name=&quot;isAccountActivation&quot;</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/v1/attachment/add</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value"> multipart/form-data</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">operationDocId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;result&quot;:&quot;(.\d+)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-824124102">&quot;ret&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">300</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="机构工作方式-上传微合同" enabled="true">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${microContractTemplate}" elementType="HTTPFileArg">
                <stringProp name="File.path">${microContractTemplate}</stringProp>
                <stringProp name="File.paramname">files[]</stringProp>
                <stringProp name="File.mimetype">text/plain </stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="Content-Disposition: form-data; name=&quot;clearing&quot;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Content-Disposition: form-data; name=&quot;clearing&quot;</stringProp>
              </elementProp>
              <elementProp name="Content-Disposition: form-data; name=&quot;finalPayment&quot;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Content-Disposition: form-data; name=&quot;finalPayment&quot;</stringProp>
              </elementProp>
              <elementProp name="Content-Disposition: form-data; name=&quot;integrationType&quot;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Content-Disposition: form-data; name=&quot;integrationType&quot;</stringProp>
              </elementProp>
              <elementProp name="Content-Disposition: form-data; name=&quot;signMethod&quot;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Content-Disposition: form-data; name=&quot;signMethod&quot;</stringProp>
              </elementProp>
              <elementProp name="Content-Disposition: form-data; name=&quot;isPackage&quot;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Content-Disposition: form-data; name=&quot;isPackage&quot;</stringProp>
              </elementProp>
              <elementProp name="Content-Disposition: form-data; name=&quot;isFinancialReport&quot;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Content-Disposition: form-data; name=&quot;isFinancialReport&quot;</stringProp>
              </elementProp>
              <elementProp name="Content-Disposition: form-data; name=&quot;isAccountActivation&quot;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Content-Disposition: form-data; name=&quot;isAccountActivation&quot;</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/v1/attachment/add</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value"> multipart/form-data</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">microContractTemplateId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;result&quot;:&quot;(.\d+)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-824124102">&quot;ret&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="机构工作方式-上传融资申请模板" enabled="true">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${financingapplytemolate}" elementType="HTTPFileArg">
                <stringProp name="File.path">${financingapplytemolate}</stringProp>
                <stringProp name="File.paramname">files[]</stringProp>
                <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="Content-Disposition: form-data; name=&quot;clearing&quot;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Content-Disposition: form-data; name=&quot;clearing&quot;</stringProp>
              </elementProp>
              <elementProp name="Content-Disposition: form-data; name=&quot;finalPayment&quot;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Content-Disposition: form-data; name=&quot;finalPayment&quot;</stringProp>
              </elementProp>
              <elementProp name="Content-Disposition: form-data; name=&quot;integrationType&quot;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Content-Disposition: form-data; name=&quot;integrationType&quot;</stringProp>
              </elementProp>
              <elementProp name="Content-Disposition: form-data; name=&quot;signMethod&quot;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Content-Disposition: form-data; name=&quot;signMethod&quot;</stringProp>
              </elementProp>
              <elementProp name="Content-Disposition: form-data; name=&quot;isPackage&quot;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Content-Disposition: form-data; name=&quot;isPackage&quot;</stringProp>
              </elementProp>
              <elementProp name="Content-Disposition: form-data; name=&quot;isFinancialReport&quot;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Content-Disposition: form-data; name=&quot;isFinancialReport&quot;</stringProp>
              </elementProp>
              <elementProp name="Content-Disposition: form-data; name=&quot;isAccountActivation&quot;" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">Content-Disposition: form-data; name=&quot;isAccountActivation&quot;</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/v1/attachment/add</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value"> multipart/form-data</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">packageTemplateId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;result&quot;:&quot;(.\d+)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-824124102">&quot;ret&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="新建机构工作方式" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="institution_process_model_input" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{ 	&quot;name&quot;: &quot;${institutionProcessModelname}&quot;, 	&quot;finalPayment&quot;: &quot;0&quot;, 	&quot;integrationType&quot;: &quot;0&quot;, 	&quot;signMethod&quot;: &quot;0&quot;, 	&quot;isFinancialReport&quot;: &quot;0&quot;, 	&quot;isAccountActivation&quot;: &quot;0&quot;, 	&quot;lendingSLA&quot;: &quot;0&quot;, 	&quot;finalPaymentSLA&quot;: &quot;0&quot;, 	&quot;package&quot;: false, 	&quot;clearing&quot;: &quot;true&quot;, 	&quot;processConfig&quot;: { 		&quot;packageModel&quot;: { 			&quot;frequencyUnit&quot;: &quot;1&quot;, 			&quot;frequencyValue&quot;: &quot;1&quot;, 			&quot;startHour&quot;: 0, 			&quot;startMinute&quot;: 0, 			&quot;packageParty&quot;: &quot;1&quot;, 			&quot;packageMaxLimit&quot;: 0, 			&quot;packageMinLimit&quot;: 0, 			&quot;hasMinLimit&quot;: true, 			&quot;hasMaxLimit&quot;: true, 			&quot;packageTemplateId&quot;: &quot;${packageTemplateId}&quot;, 			&quot;sameDueDate&quot;: true 		}, 		&quot;agreementTemplates&quot;: [{ 			&quot;name&quot;: &quot;${financingagreement_Name}&quot;, 			&quot;attachmentId&quot;: &quot;${financingagreement_Id}&quot; 		}, { 			&quot;name&quot;: &quot;${receivablesagreement_Name}&quot;, 			&quot;attachmentId&quot;: &quot;${receivablesagreement_Id}&quot; 		}, { 			&quot;name&quot;: &quot;${applyagreement_Name}&quot;, 			&quot;attachmentId&quot;: &quot;${applyagreement_Id}&quot; 		}], 		&quot;operationTemplates&quot;: [{ 			&quot;name&quot;: &quot;${operationDocName}&quot;, 			&quot;attachmentId&quot;: &quot;${operationDocId}&quot; 		}], 		&quot;microContractTemplates&quot;: [{ 			&quot;name&quot;: &quot;${microContractTemplateName}&quot;, 			&quot;attachmentId&quot;: &quot;${microContractTemplateId}&quot; 		}] 	}, 	&quot;anxinSignMap&quot;: { 		&quot;${financingagreement_Id}&quot;: &quot;BLRZ_1&quot;, 		&quot;${receivablesagreement_Id}&quot;: &quot;YSZK_1&quot;, 		&quot;${applyagreement_Id}&quot;: &quot;WHT_QZ_II_1&quot; 	} }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">institution_process_model_input</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v1/institutionprocessmodel/create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">newinstitutionProcessModel</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;result&quot;:&quot;(.\d+)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-824124102">&quot;ret&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">300</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="启用机构工作方式" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${newinstitutionProcessModel}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">id</stringProp>
              </elementProp>
              <elementProp name="state" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">state</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v1/institutionprocessmodel/setstate</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          </CookieManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-824124102">&quot;ret&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">institutionProcessModel</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;result&quot;:(.\d+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
          <stringProp name="BeanShellSampler.query">${__setProperty(institutionProcessModel1,${institutionProcessModel},)}//机构工作方式
${__setProperty(packageTemplateId1,${packageTemplateId},)}//融资申请模板
${__setProperty(receivablesagreement_Id1,${receivablesagreement_Id},)}//应收账款协议
${__setProperty(financingagreement_Id1,${financingagreement_Id},)}//保理融资协议
${__setProperty(applyagreement_Id1,${applyagreement_Id},)}//H5申请融资协议
${__setProperty(operationDocId1,${operationDocId},)}//操作说明
${__setProperty(microContractTemplateId1,${microContractTemplateId},)}//微合同

${__setProperty(receivablesagreement_Name1,${receivablesagreement_Name},)}//应收账款协议名称
${__setProperty(financingagreement_Name1,${financingagreement_Name},)}//保理融资协议名称
${__setProperty(applyagreement_Name1,${applyagreement_Name},)}//H5申请融资协议
${__setProperty(operationDocName1,${operationDocName},)}//操作说明名称
${__setProperty(microContractTemplateName1,${microContractTemplateName},)}//微合同名称
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="新建方案" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">30</stringProp>
        <stringProp name="ThreadGroup.delay">30</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="solutionname" elementType="Argument">
              <stringProp name="Argument.name">solutionname</stringProp>
              <stringProp name="Argument.value">N%2b1逐笔按账期先息后本实时方案${__time(/1000,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="invitecsvFile" elementType="Argument">
              <stringProp name="Argument.name">invitecsvFile</stringProp>
              <stringProp name="Argument.value">D:/JMeter/attachment/cus.csv</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="financialSolution" elementType="Argument">
              <stringProp name="Argument.name">financialSolution</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;0&quot;:&quot;N+1&quot;，&quot;1&quot;:&quot;1+N&quot;，&quot;3&quot;:&quot;CASH&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request-查询机构invited_cellphone" enabled="true">
          <stringProp name="dataSource">MySQL</stringProp>
          <stringProp name="query">SELECT IFNULL((SELECT invited_contact_cellphone FROM dcf_user.customer_reg_invitation WHERE invited_customer_name=&apos;${orgname}&apos;),0) as invited_org_cellphone</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">invited_org_cellphone</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">${__setProperty(invited_contact_cellphone,${invited_org_cellphone_1},)}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="邀请客户、注册、认证" enabled="true">
          <stringProp name="IfController.condition">${invited_org_cellphone_1} == 0</stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="客户类型" enabled="true">
            <stringProp name="BeanShellSampler.query">${__setProperty(invitedCustomerType,&quot;ORG&quot;,)};
${__setProperty(invite_name,${orgname},)};
${__setProperty(invite_mobile,${org_mobile},)};</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="写入邀请客户" enabled="false">
            <stringProp name="BeanShellSampler.query">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;

char SEPARATOR = &apos;,&apos;;
public void writeLine(FileWriter writer, String[] params, char separator)
{
  boolean firstParam = true;

  StringBuilder stringBuilder = new StringBuilder();
  String param = &quot;&quot;;
  
  for (int i = 0; i &lt; params.length; i++)
  {
  	param = params[i];
  	log.info(&quot;##############&quot;);
     log.info(param);
     if (!firstParam)
      {
          stringBuilder.append(separator);
      }
      stringBuilder.append(param);
     
      firstParam = false;
  }
  //add to file the line
  log.info(stringBuilder.toString());
  writer.append(stringBuilder.toString());

}

//String csvFile = &quot;D:/JMeter/attachment/cus.csv&quot;; 
String csvFile = &quot;${invitecsvFile}&quot;; 
log.info(&quot;####################&quot;);
String customer_1;
//String customer_1=&quot;${chainname}&quot;;
vars.put(&quot;cus&quot;,bsh.args[0]);
customer_1=vars.get(&quot;cus&quot;);
log.info(customer_1);
String cus_1=null;
String cus_1 = new String(customer_1.getBytes(&quot;utf-8&quot;),&quot;gbk&quot;);
String[] params = &quot;c_1,c_2,c_3&quot;.split(&quot;,&quot;);
params[0]=cus_1;
vars.put(&quot;cel&quot;,bsh.args[1]);
cellphone_1=vars.get(&quot;cel&quot;);
log.info(cellphone_1);
params[1]=cellphone_1;

FileWriter fileWriter = new FileWriter(csvFile);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters">${orgname} ${org_mobile}</stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="邀请" enabled="true">
            <stringProp name="IncludeController.includepath">D:\JMeter\module\invite1.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="注册认证" enabled="true">
            <stringProp name="IncludeController.includepath">D:\JMeter\module\register1.jmx</stringProp>
          </IncludeController>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request-查询机构customerID" enabled="true">
          <stringProp name="dataSource">MySQL</stringProp>
          <stringProp name="query">select customer_id from dcf_customer.customer where customer_name=?</stringProp>
          <stringProp name="queryArguments">${orgname}</stringProp>
          <stringProp name="queryArgumentsTypes">varchar</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">org_id</stringProp>
        </JDBCSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="新建N+1逐笔按账期先息后本实时方案" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="api" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">/v1/solution/create</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">api</stringProp>
              </elementProp>
              <elementProp name="solution_input" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{ 	&quot;financialSolution&quot;: &quot;${financialSolution}&quot;, 	&quot;product&quot;: { 		&quot;id&quot;: &quot;${__property(product1)}&quot; 	}, 	&quot;institutionProcessModel&quot;: { 		&quot;id&quot;: &quot;${__property(institutionProcessModel1)}&quot; 	}, 	&quot;name&quot;: &quot;${solutionname}&quot;, 	&quot;institution&quot;: { 		&quot;id&quot;: &quot;${org_id_1}&quot; 	}, 	&quot;solutionConfig&quot;: { 	&quot;microContractTemplateId&quot;: &quot;${__property(microContractTemplateId1)}&quot;, 		&quot;microContractTemplateName&quot;: &quot;${__property(microContractTemplateName1)}&quot;, 		&quot;operationDocId&quot;: &quot;${__property(operationDocId1)}&quot;, 		&quot;operationDocName&quot;: &quot;${__property(operationDocName1)}&quot;, 		&quot;financingAgreementTemplates&quot;: [{ 			&quot;financingAgreementTemplateId&quot;: &quot;${__property(applyagreement_Id1)}&quot;, 			&quot;financingAgreementTemplateName&quot;: &quot;${__property(applyagreement_Name1)}&quot; 		}], 		&quot;agreementTemplates&quot;: [{ 			&quot;firstParty&quot;: &quot;2&quot;, 			&quot;secondParty&quot;: &quot;0&quot;, 			&quot;agreementTemplateId&quot;: &quot;${__property(receivablesagreement_Id1)}&quot;, 			&quot;agreementTemplateName&quot;: &quot;${__property(receivablesagreement_Name1)}&quot; 		},  			{ 			&quot;firstParty&quot;: &quot;2&quot;, 			&quot;secondParty&quot;: &quot;1&quot;, 			&quot;agreementTemplateId&quot;: &quot;${__property(receivablesagreement_Id1)}&quot;, 			&quot;agreementTemplateName&quot;: &quot;${__property(receivablesagreement_Name1)}&quot; 		},  			{ 			&quot;firstParty&quot;: &quot;2&quot;, 			&quot;secondParty&quot;: &quot;0&quot;, 			&quot;agreementTemplateId&quot;: &quot;${__property(financingagreement_Id1)}&quot;, 			&quot;agreementTemplateName&quot;: &quot;${__property(financingagreement_Name1)}&quot; 		}], 		&quot;paymentSettlementWays&quot;: [{ 			&quot;fundUse&quot;: &quot;1&quot;, 			&quot;settlementWay&quot;: &quot;单笔实时&quot;, 			&quot;timer1&quot;: &quot;&quot;, 			&quot;timer2&quot;: &quot;&quot;, 			&quot;timer3&quot;: &quot;&quot; 		}, { 			&quot;fundUse&quot;: &quot;2&quot;, 			&quot;settlementWay&quot;: &quot;单笔实时&quot;, 			&quot;timer1&quot;: &quot;&quot;, 			&quot;timer2&quot;: &quot;&quot;, 			&quot;timer3&quot;: &quot;&quot; 		}, { 			&quot;fundUse&quot;: &quot;4&quot;, 			&quot;settlementWay&quot;: &quot;单笔实时&quot;, 			&quot;timer1&quot;: &quot;&quot;, 			&quot;timer2&quot;: &quot;&quot;, 			&quot;timer3&quot;: &quot;&quot; 		}, { 			&quot;fundUse&quot;: &quot;5&quot;, 			&quot;settlementWay&quot;: &quot;单笔实时&quot;, 			&quot;timer1&quot;: &quot;&quot;, 			&quot;timer2&quot;: &quot;&quot;, 			&quot;timer3&quot;: &quot;&quot; 		}] 	} }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">solution_input</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v1/solution/create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-824124102">&quot;ret&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">newsolution</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;result&quot;:&quot;(.\d+)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="启用方案" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${newsolution}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">id</stringProp>
              </elementProp>
              <elementProp name="state" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">state</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v1/solution/setstate</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
              <elementProp name="newproduct" elementType="Cookie" testname="newproduct">
                <stringProp name="Cookie.value">${COOKIE_newsolution}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          </CookieManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-824124102">&quot;ret&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">solution</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;result&quot;:(.\d+)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">${__setProperty(solution_id,${solution},)}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="新建合同" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay">60</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="N+1合同" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="projectName" elementType="Argument">
              <stringProp name="Argument.name">projectName</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">&quot;项目名称&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="buyerOrSeller" elementType="Argument">
              <stringProp name="Argument.name">buyerOrSeller</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;核心企业是供应链的&quot;:&quot;0：买家，1：卖方&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="infoFlowMode" elementType="Argument">
              <stringProp name="Argument.name">infoFlowMode</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;0&quot;,&quot;信息流产生模式&quot;:&quot;0：买方勾单，1：卖方勾单，2：机构勾单，3：平台自动&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="capitalOrderMappingMethod" elementType="Argument">
              <stringProp name="Argument.name">capitalOrderMappingMethod</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.desc">&quot;资金+订单映射方法&quot;:&quot;0：机构勾单流水,1：核心勾单流水，2：自动匹配&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="algorithm" elementType="Argument">
              <stringProp name="Argument.name">algorithm</stringProp>
              <stringProp name="Argument.value">-1</stringProp>
              <stringProp name="Argument.desc">&quot;算法&quot;:&quot;0：实付流水，1：先到先核，2：现金采购，非现金采购默认-1&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="triggerRule" elementType="Argument">
              <stringProp name="Argument.name">triggerRule</stringProp>
              <stringProp name="Argument.value">-1</stringProp>
              <stringProp name="Argument.desc">&quot;触发规则&quot;:&quot;0：余额核销，1：按账核销，2单笔金额一致，非现金采购默认-1&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="capitalFlowMode" elementType="Argument">
              <stringProp name="Argument.name">capitalFlowMode</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;资金流产生模式&quot;:&quot;0：独立回款户，1：公共回款户&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="repaymentModel" elementType="Argument">
              <stringProp name="Argument.name">repaymentModel</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;还款模式&quot;:&quot;0：全额货款，1：只还本利&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="investmentGainsEnabled" elementType="Argument">
              <stringProp name="Argument.name">investmentGainsEnabled</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;投资收益是否开启&quot;:&quot;0：关闭，1：开启&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="prepaymentVisible" elementType="Argument">
              <stringProp name="Argument.name">prepaymentVisible</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;提前付款链属是否可见&quot;:&quot;0：不可见，1：可见&quot;,默认0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="quota" elementType="Argument">
              <stringProp name="Argument.name">quota</stringProp>
              <stringProp name="Argument.value">1000000</stringProp>
              <stringProp name="Argument.desc">额度：元</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="creditRate" elementType="Argument">
              <stringProp name="Argument.name">creditRate</stringProp>
              <stringProp name="Argument.value">100</stringProp>
              <stringProp name="Argument.desc">&quot;劣后比例&quot;:默认100</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="securityDepositRate" elementType="Argument">
              <stringProp name="Argument.name">securityDepositRate</stringProp>
              <stringProp name="Argument.value">0.00</stringProp>
              <stringProp name="Argument.desc">&quot;保证金比例&quot;:</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chargeRulesperiod" elementType="Argument">
              <stringProp name="Argument.name">chargeRulesperiod</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;期限区间&quot;:&quot;0：账期内，1：宽限期内，2：回购期内，3：回购期外，4：全期限&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chargeRuleschargerId" elementType="Argument">
              <stringProp name="Argument.name">chargeRuleschargerId</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.desc">&quot;收费方&quot;:&quot;0：卖家，1：买家，2：机构，3：平台&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chargeRulespayerId" elementType="Argument">
              <stringProp name="Argument.name">chargeRulespayerId</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;付款方&quot;:&quot;0：卖家，1：买家&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chargeRuleschargeCategory" elementType="Argument">
              <stringProp name="Argument.name">chargeRuleschargeCategory</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.desc">&quot;费用类型&quot;:&quot;1：利息，3：手续费&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chargeRulespaymentBase" elementType="Argument">
              <stringProp name="Argument.name">chargeRulespaymentBase</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;收费基数&quot;:&quot;0：融资金额，1：应收账款金额，2：融资余额&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chargeRuleschargePoint" elementType="Argument">
              <stringProp name="Argument.name">chargeRuleschargePoint</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.desc">&quot;收费时点&quot;:&quot;0：放款时，1：还款时，2：还款后月结，3：预付货款扣收&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chargeRuleschargeType" elementType="Argument">
              <stringProp name="Argument.name">chargeRuleschargeType</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.desc">&quot;收费方式&quot;:&quot;0：按笔固定金额，1按笔固定比例，2：按实际天数，3：按全账期天数&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chargeRulesbaseInterestRateType" elementType="Argument">
              <stringProp name="Argument.name">chargeRulesbaseInterestRateType</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.desc">&quot;基准利率类型&quot;:&quot;1：半年期基准利率，2：一年期基准利率，3：固定利率&quot;,（收费方式为2,3可选）</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chargeRulesValue" elementType="Argument">
              <stringProp name="Argument.name">chargeRulesValue</stringProp>
              <stringProp name="Argument.value">10.00</stringProp>
              <stringProp name="Argument.desc">金额或者利率（10.00为10%）</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanAccountName" elementType="Argument">
              <stringProp name="Argument.name">loanAccountName</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">融资账户名</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanAccountNo" elementType="Argument">
              <stringProp name="Argument.name">loanAccountNo</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">融资账号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanAccountbranchName" elementType="Argument">
              <stringProp name="Argument.name">loanAccountbranchName</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">融资账户银行开户行</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanAccountbranchcnaps" elementType="Argument">
              <stringProp name="Argument.name">loanAccountbranchcnaps</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">融资户开户行代号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanTrusteeshiptrusteeshipMode" elementType="Argument">
              <stringProp name="Argument.name">loanTrusteeshiptrusteeshipMode</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;放款户托管方式&quot;:&quot;0：账户托管，1：外部账户&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanTrusteeshipaccountName" elementType="Argument">
              <stringProp name="Argument.name">loanTrusteeshipaccountName</stringProp>
              <stringProp name="Argument.value">${orgname}</stringProp>
              <stringProp name="Argument.desc">放款户账户名</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanTrusteeshipaccountNo" elementType="Argument">
              <stringProp name="Argument.name">loanTrusteeshipaccountNo</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">放款户账号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanTrusteeshipbranchName" elementType="Argument">
              <stringProp name="Argument.name">loanTrusteeshipbranchName</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">放款户账户开户行</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanTrusteeshipcnaps" elementType="Argument">
              <stringProp name="Argument.name">loanTrusteeshipcnaps</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">放款户账户银行代号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="returnTrusteeshiptrusteeshipMode" elementType="Argument">
              <stringProp name="Argument.name">returnTrusteeshiptrusteeshipMode</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;回款户托管方式&quot;:&quot;0：账户托管，1：外部账户&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="returnTrusteeshipaccountName" elementType="Argument">
              <stringProp name="Argument.name">returnTrusteeshipaccountName</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">回款户账户名</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="returnTrusteeshipaccountNo" elementType="Argument">
              <stringProp name="Argument.name">returnTrusteeshipaccountNo</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">回款户账号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="returnTrusteeshipbranchName" elementType="Argument">
              <stringProp name="Argument.name">returnTrusteeshipbranchName</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">回款户开户行</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="returnTrusteeshipbranchcnaps" elementType="Argument">
              <stringProp name="Argument.name">returnTrusteeshipbranchcnaps</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">回款户开户行代号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="finalPaymentAccountaccountName" elementType="Argument">
              <stringProp name="Argument.name">finalPaymentAccountaccountName</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">指定接收尾款户账户名</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="finalPaymentAccountaccountNo" elementType="Argument">
              <stringProp name="Argument.name">finalPaymentAccountaccountNo</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">指定接收尾款户账号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="finalPaymentAccountbranchName" elementType="Argument">
              <stringProp name="Argument.name">finalPaymentAccountbranchName</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">指定接收尾款户开户行</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="finalPaymentAccountbranchcnaps" elementType="Argument">
              <stringProp name="Argument.name">finalPaymentAccountbranchcnaps</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">指定接受尾款户开户行代号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="retrieveTrusteeshiptrusteeshipMode" elementType="Argument">
              <stringProp name="Argument.name">retrieveTrusteeshiptrusteeshipMode</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;回收本金账户&quot;托管方式&quot;:&quot;0：账户托管，1：外部账户&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="retrieveTrusteeshipaccountName" elementType="Argument">
              <stringProp name="Argument.name">retrieveTrusteeshipaccountName</stringProp>
              <stringProp name="Argument.value">${orgname}</stringProp>
              <stringProp name="Argument.desc">回收本金账户账户名</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="retrieveTrusteeshipaccountNo" elementType="Argument">
              <stringProp name="Argument.name">retrieveTrusteeshipaccountNo</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">回收本金账户账号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="retrieveTrusteeshipbranchName" elementType="Argument">
              <stringProp name="Argument.name">retrieveTrusteeshipbranchName</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">回收本金账户开户行</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="retrieveTrusteeshipcnaps" elementType="Argument">
              <stringProp name="Argument.name">retrieveTrusteeshipcnaps</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">回收本金账户银行代号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="profitAccountaccountName" elementType="Argument">
              <stringProp name="Argument.name">profitAccountaccountName</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">核心投资收益户账户名</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="profitAccountaccountNo" elementType="Argument">
              <stringProp name="Argument.name">profitAccountaccountNo</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">核心投资收益户账号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="profitAccountbranchName" elementType="Argument">
              <stringProp name="Argument.name">profitAccountbranchName</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">核心投资收益户开户行</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="profitAccountcnaps" elementType="Argument">
              <stringProp name="Argument.name">profitAccountcnaps</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">核心投资收益户银行代号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="institutionAdvanceTrusteeship" elementType="Argument">
              <stringProp name="Argument.name">institutionAdvanceTrusteeship</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;机构预收款账户托管方式&quot;:&quot;0：账户托管，1：外部账户&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="institutionAdvanceTrusteeshipaccountName" elementType="Argument">
              <stringProp name="Argument.name">institutionAdvanceTrusteeshipaccountName</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.desc">机构预收款账户账户名</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="institutionAdvanceTrusteeshipaccountNo" elementType="Argument">
              <stringProp name="Argument.name">institutionAdvanceTrusteeshipaccountNo</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.desc">机构预收款账户账号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="institutionAdvanceTrusteeshipbranchName" elementType="Argument">
              <stringProp name="Argument.name">institutionAdvanceTrusteeshipbranchName</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.desc">机构预收款账户开户行</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="case_name" elementType="Argument">
              <stringProp name="Argument.name">case_name</stringProp>
              <stringProp name="Argument.value">操作说明</stringProp>
              <stringProp name="Argument.desc">操作说明名称</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="1+N合同" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="projectName" elementType="Argument">
              <stringProp name="Argument.name">projectName</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">&quot;项目名称&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="buyerOrSeller" elementType="Argument">
              <stringProp name="Argument.name">buyerOrSeller</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.desc">&quot;核心企业是供应链的&quot;:&quot;0：买家，1：卖方&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="infoFlowMode" elementType="Argument">
              <stringProp name="Argument.name">infoFlowMode</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.desc">&quot;0&quot;,&quot;信息流产生模式&quot;:&quot;0：买方勾单，1：卖方勾单，2：机构勾单，3：平台自动&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="capitalOrderMappingMethod" elementType="Argument">
              <stringProp name="Argument.name">capitalOrderMappingMethod</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;资金+订单映射方法&quot;:&quot;0：机构勾单流水,1：核心勾单流水，2：自动匹配&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="algorithm" elementType="Argument">
              <stringProp name="Argument.name">algorithm</stringProp>
              <stringProp name="Argument.value">-1</stringProp>
              <stringProp name="Argument.desc">&quot;算法&quot;:&quot;0：实付流水，1：先到先核，2：现金采购，非现金采购默认-1&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="triggerRule" elementType="Argument">
              <stringProp name="Argument.name">triggerRule</stringProp>
              <stringProp name="Argument.value">-1</stringProp>
              <stringProp name="Argument.desc">&quot;触发规则&quot;:&quot;0：余额核销，1：按账核销，2单笔金额一致，非现金采购默认-1&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="capitalFlowMode" elementType="Argument">
              <stringProp name="Argument.name">capitalFlowMode</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.desc">&quot;资金流产生模式&quot;:&quot;0：独立回款户，1：公共回款户&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="repaymentModel" elementType="Argument">
              <stringProp name="Argument.name">repaymentModel</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;还款模式&quot;:&quot;0：全额货款，1：只还本利&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="investmentGainsEnabled" elementType="Argument">
              <stringProp name="Argument.name">investmentGainsEnabled</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;投资收益是否开启&quot;:&quot;0：关闭，1：开启&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="prepaymentVisible" elementType="Argument">
              <stringProp name="Argument.name">prepaymentVisible</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;提前付款链属是否可见&quot;:&quot;0：不可见，1：可见&quot;,默认0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="quota" elementType="Argument">
              <stringProp name="Argument.name">quota</stringProp>
              <stringProp name="Argument.value">1000000</stringProp>
              <stringProp name="Argument.desc">额度：元</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="creditRate" elementType="Argument">
              <stringProp name="Argument.name">creditRate</stringProp>
              <stringProp name="Argument.value">100</stringProp>
              <stringProp name="Argument.desc">&quot;劣后比例&quot;:默认100</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="securityDepositRate" elementType="Argument">
              <stringProp name="Argument.name">securityDepositRate</stringProp>
              <stringProp name="Argument.value">0.00</stringProp>
              <stringProp name="Argument.desc">&quot;保证金比例&quot;:</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chargeRulesperiod" elementType="Argument">
              <stringProp name="Argument.name">chargeRulesperiod</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;期限区间&quot;:&quot;0：账期内，1：宽限期内，2：回购期内，3：回购期外，4：全期限&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chargeRuleschargerId" elementType="Argument">
              <stringProp name="Argument.name">chargeRuleschargerId</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.desc">&quot;收费方&quot;:&quot;0：卖家，1：买家，2：机构，3：平台&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chargeRulespayerId" elementType="Argument">
              <stringProp name="Argument.name">chargeRulespayerId</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;付款方&quot;:&quot;0：卖家，1：买家&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chargeRuleschargeCategory" elementType="Argument">
              <stringProp name="Argument.name">chargeRuleschargeCategory</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.desc">&quot;费用类型&quot;:&quot;1：利息，3：手续费&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chargeRulespaymentBase" elementType="Argument">
              <stringProp name="Argument.name">chargeRulespaymentBase</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;收费基数&quot;:&quot;0：融资金额，1：应收账款金额，2：融资余额&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chargeRuleschargePoint" elementType="Argument">
              <stringProp name="Argument.name">chargeRuleschargePoint</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.desc">&quot;收费时点&quot;:&quot;0：放款时，1：还款时，2：还款后月结，3：预付货款扣收&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chargeRuleschargeType" elementType="Argument">
              <stringProp name="Argument.name">chargeRuleschargeType</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.desc">&quot;收费方式&quot;:&quot;0：按笔固定金额，1按笔固定比例，2：按实际天数，3：按全账期天数&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chargeRulesbaseInterestRateType" elementType="Argument">
              <stringProp name="Argument.name">chargeRulesbaseInterestRateType</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.desc">&quot;基准利率类型&quot;:&quot;1：半年期基准利率，2：一年期基准利率，3：固定利率&quot;,（收费方式为2,3可选）</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chargeRulesValue" elementType="Argument">
              <stringProp name="Argument.name">chargeRulesValue</stringProp>
              <stringProp name="Argument.value">10.00</stringProp>
              <stringProp name="Argument.desc">金额或者利率（10.00为10%）</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanAccountName" elementType="Argument">
              <stringProp name="Argument.name">loanAccountName</stringProp>
              <stringProp name="Argument.value">${corpname}</stringProp>
              <stringProp name="Argument.desc">融资账户名</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanAccountNo" elementType="Argument">
              <stringProp name="Argument.name">loanAccountNo</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">融资账号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanAccountbranchName" elementType="Argument">
              <stringProp name="Argument.name">loanAccountbranchName</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">融资账户银行开户行</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanAccountbranchcnaps" elementType="Argument">
              <stringProp name="Argument.name">loanAccountbranchcnaps</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">融资户开户行代号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanTrusteeshiptrusteeshipMode" elementType="Argument">
              <stringProp name="Argument.name">loanTrusteeshiptrusteeshipMode</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;放款户托管方式&quot;:&quot;0：账户托管，1：外部账户&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanTrusteeshipaccountName" elementType="Argument">
              <stringProp name="Argument.name">loanTrusteeshipaccountName</stringProp>
              <stringProp name="Argument.value">${orgname}</stringProp>
              <stringProp name="Argument.desc">放款户账户名</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanTrusteeshipaccountNo" elementType="Argument">
              <stringProp name="Argument.name">loanTrusteeshipaccountNo</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">放款户账号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanTrusteeshipbranchName" elementType="Argument">
              <stringProp name="Argument.name">loanTrusteeshipbranchName</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">放款户账户开户行</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanTrusteeshipcnaps" elementType="Argument">
              <stringProp name="Argument.name">loanTrusteeshipcnaps</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">放款户账户银行代号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="returnTrusteeshiptrusteeshipMode" elementType="Argument">
              <stringProp name="Argument.name">returnTrusteeshiptrusteeshipMode</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;回款户托管方式&quot;:&quot;0：账户托管，1：外部账户&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="returnTrusteeshipaccountName" elementType="Argument">
              <stringProp name="Argument.name">returnTrusteeshipaccountName</stringProp>
              <stringProp name="Argument.value">${orgname}</stringProp>
              <stringProp name="Argument.desc">回款户账户名</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="returnTrusteeshipaccountNo" elementType="Argument">
              <stringProp name="Argument.name">returnTrusteeshipaccountNo</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">回款户账号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="returnTrusteeshipbranchName" elementType="Argument">
              <stringProp name="Argument.name">returnTrusteeshipbranchName</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">回款户开户行</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="returnTrusteeshipbranchcnaps" elementType="Argument">
              <stringProp name="Argument.name">returnTrusteeshipbranchcnaps</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">回款户开户行代号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="finalPaymentAccountaccountName" elementType="Argument">
              <stringProp name="Argument.name">finalPaymentAccountaccountName</stringProp>
              <stringProp name="Argument.value">${corpname}</stringProp>
              <stringProp name="Argument.desc">指定接收尾款户账户名</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="finalPaymentAccountaccountNo" elementType="Argument">
              <stringProp name="Argument.name">finalPaymentAccountaccountNo</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">指定接收尾款户账号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="finalPaymentAccountbranchName" elementType="Argument">
              <stringProp name="Argument.name">finalPaymentAccountbranchName</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">指定接收尾款户开户行</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="finalPaymentAccountbranchcnaps" elementType="Argument">
              <stringProp name="Argument.name">finalPaymentAccountbranchcnaps</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">指定接受尾款户开户行代号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="retrieveTrusteeshiptrusteeshipMode" elementType="Argument">
              <stringProp name="Argument.name">retrieveTrusteeshiptrusteeshipMode</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;回收本金账户&quot;托管方式&quot;:&quot;0：账户托管，1：外部账户&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="retrieveTrusteeshipaccountName" elementType="Argument">
              <stringProp name="Argument.name">retrieveTrusteeshipaccountName</stringProp>
              <stringProp name="Argument.value">${orgname}</stringProp>
              <stringProp name="Argument.desc">回收本金账户账户名</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="retrieveTrusteeshipaccountNo" elementType="Argument">
              <stringProp name="Argument.name">retrieveTrusteeshipaccountNo</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">回收本金账户账号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="retrieveTrusteeshipbranchName" elementType="Argument">
              <stringProp name="Argument.name">retrieveTrusteeshipbranchName</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">回收本金账户开户行</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="retrieveTrusteeshipcnaps" elementType="Argument">
              <stringProp name="Argument.name">retrieveTrusteeshipcnaps</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">回收本金账户银行代号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="profitAccountaccountName" elementType="Argument">
              <stringProp name="Argument.name">profitAccountaccountName</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.desc">核心投资收益户账户名</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="profitAccountaccountNo" elementType="Argument">
              <stringProp name="Argument.name">profitAccountaccountNo</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.desc">核心投资收益户账号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="profitAccountbranchName" elementType="Argument">
              <stringProp name="Argument.name">profitAccountbranchName</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.desc">核心投资收益户开户行</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="profitAccountcnaps" elementType="Argument">
              <stringProp name="Argument.name">profitAccountcnaps</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.desc">核心投资收益户银行代号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="institutionAdvanceTrusteeship" elementType="Argument">
              <stringProp name="Argument.name">institutionAdvanceTrusteeship</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;机构预收款账户托管方式&quot;:&quot;0：账户托管，1：外部账户&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="institutionAdvanceTrusteeshipaccountName" elementType="Argument">
              <stringProp name="Argument.name">institutionAdvanceTrusteeshipaccountName</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.desc">机构预收款账户账户名</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="institutionAdvanceTrusteeshipaccountNo" elementType="Argument">
              <stringProp name="Argument.name">institutionAdvanceTrusteeshipaccountNo</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.desc">机构预收款账户账号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="institutionAdvanceTrusteeshipbranchName" elementType="Argument">
              <stringProp name="Argument.name">institutionAdvanceTrusteeshipbranchName</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.desc">机构预收款账户开户行</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="case_name" elementType="Argument">
              <stringProp name="Argument.name">case_name</stringProp>
              <stringProp name="Argument.value">操作说明</stringProp>
              <stringProp name="Argument.desc">操作说明名称</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="cash" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="projectName" elementType="Argument">
              <stringProp name="Argument.name">projectName</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">&quot;项目名称&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="buyerOrSeller" elementType="Argument">
              <stringProp name="Argument.name">buyerOrSeller</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;核心企业是供应链的&quot;:&quot;0：买家，1：卖方&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="infoFlowMode" elementType="Argument">
              <stringProp name="Argument.name">infoFlowMode</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;0&quot;,&quot;信息流产生模式&quot;:&quot;0：买方勾单，1：卖方勾单，2：机构勾单，3：平台自动&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="capitalOrderMappingMethod" elementType="Argument">
              <stringProp name="Argument.name">capitalOrderMappingMethod</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.desc">&quot;资金+订单映射方法&quot;:&quot;0：机构勾单流水,1：核心勾单流水，2：自动匹配&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="algorithm" elementType="Argument">
              <stringProp name="Argument.name">algorithm</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.desc">&quot;算法&quot;:&quot;0：实付流水，1：先到先核，2：现金采购，非现金采购默认-1&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="triggerRule" elementType="Argument">
              <stringProp name="Argument.name">triggerRule</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;触发规则&quot;:&quot;0：余额核销，1：按账核销，2单笔金额一致，非现金采购默认-1&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="capitalFlowMode" elementType="Argument">
              <stringProp name="Argument.name">capitalFlowMode</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;资金流产生模式&quot;:&quot;0：独立回款户，1：公共回款户&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="repaymentModel" elementType="Argument">
              <stringProp name="Argument.name">repaymentModel</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;还款模式&quot;:&quot;0：全额货款，1：只还本利&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="investmentGainsEnabled" elementType="Argument">
              <stringProp name="Argument.name">investmentGainsEnabled</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;投资收益是否开启&quot;:&quot;0：关闭，1：开启&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="prepaymentVisible" elementType="Argument">
              <stringProp name="Argument.name">prepaymentVisible</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;提前付款链属是否可见&quot;:&quot;0：不可见，1：可见&quot;,默认0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="quota" elementType="Argument">
              <stringProp name="Argument.name">quota</stringProp>
              <stringProp name="Argument.value">1000000</stringProp>
              <stringProp name="Argument.desc">额度：元</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="creditRate" elementType="Argument">
              <stringProp name="Argument.name">creditRate</stringProp>
              <stringProp name="Argument.value">100</stringProp>
              <stringProp name="Argument.desc">&quot;劣后比例&quot;:默认100</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="securityDepositRate" elementType="Argument">
              <stringProp name="Argument.name">securityDepositRate</stringProp>
              <stringProp name="Argument.value">0.00</stringProp>
              <stringProp name="Argument.desc">&quot;保证金比例&quot;:</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chargeRulesperiod" elementType="Argument">
              <stringProp name="Argument.name">chargeRulesperiod</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;期限区间&quot;:&quot;0：账期内，1：宽限期内，2：回购期内，3：回购期外，4：全期限&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chargeRuleschargerId" elementType="Argument">
              <stringProp name="Argument.name">chargeRuleschargerId</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.desc">&quot;收费方&quot;:&quot;0：卖家，1：买家，2：机构，3：平台&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chargeRulespayerId" elementType="Argument">
              <stringProp name="Argument.name">chargeRulespayerId</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;付款方&quot;:&quot;0：卖家，1：买家&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chargeRuleschargeCategory" elementType="Argument">
              <stringProp name="Argument.name">chargeRuleschargeCategory</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.desc">&quot;费用类型&quot;:&quot;1：利息，3：手续费&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chargeRulespaymentBase" elementType="Argument">
              <stringProp name="Argument.name">chargeRulespaymentBase</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;收费基数&quot;:&quot;0：融资金额，1：应收账款金额，2：融资余额&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chargeRuleschargePoint" elementType="Argument">
              <stringProp name="Argument.name">chargeRuleschargePoint</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.desc">&quot;收费时点&quot;:&quot;0：放款时，1：还款时，2：还款后月结，3：预付货款扣收&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chargeRuleschargeType" elementType="Argument">
              <stringProp name="Argument.name">chargeRuleschargeType</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.desc">&quot;收费方式&quot;:&quot;0：按笔固定金额，1按笔固定比例，2：按实际天数，3：按全账期天数&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chargeRulesbaseInterestRateType" elementType="Argument">
              <stringProp name="Argument.name">chargeRulesbaseInterestRateType</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.desc">&quot;基准利率类型&quot;:&quot;1：半年期基准利率，2：一年期基准利率，3：固定利率&quot;,（收费方式为2,3可选）</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chargeRulesValue" elementType="Argument">
              <stringProp name="Argument.name">chargeRulesValue</stringProp>
              <stringProp name="Argument.value">10.00</stringProp>
              <stringProp name="Argument.desc">金额或者利率（10.00为10%）</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanAccountName" elementType="Argument">
              <stringProp name="Argument.name">loanAccountName</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">融资账户名</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanAccountNo" elementType="Argument">
              <stringProp name="Argument.name">loanAccountNo</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">融资账号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanAccountbranchName" elementType="Argument">
              <stringProp name="Argument.name">loanAccountbranchName</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">融资账户银行开户行</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanAccountbranchcnaps" elementType="Argument">
              <stringProp name="Argument.name">loanAccountbranchcnaps</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">融资户开户行代号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanTrusteeshiptrusteeshipMode" elementType="Argument">
              <stringProp name="Argument.name">loanTrusteeshiptrusteeshipMode</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.desc">&quot;放款户托管方式&quot;:&quot;0：账户托管，1：外部账户&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanTrusteeshipaccountName" elementType="Argument">
              <stringProp name="Argument.name">loanTrusteeshipaccountName</stringProp>
              <stringProp name="Argument.value">${orgname}</stringProp>
              <stringProp name="Argument.desc">放款户账户名</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanTrusteeshipaccountNo" elementType="Argument">
              <stringProp name="Argument.name">loanTrusteeshipaccountNo</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">放款户账号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanTrusteeshipbranchName" elementType="Argument">
              <stringProp name="Argument.name">loanTrusteeshipbranchName</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">放款户账户开户行</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanTrusteeshipcnaps" elementType="Argument">
              <stringProp name="Argument.name">loanTrusteeshipcnaps</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">放款户账户银行代号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="returnTrusteeshiptrusteeshipMode" elementType="Argument">
              <stringProp name="Argument.name">returnTrusteeshiptrusteeshipMode</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;回款户托管方式&quot;:&quot;0：账户托管，1：外部账户&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="returnTrusteeshipaccountName" elementType="Argument">
              <stringProp name="Argument.name">returnTrusteeshipaccountName</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">回款户账户名</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="returnTrusteeshipaccountNo" elementType="Argument">
              <stringProp name="Argument.name">returnTrusteeshipaccountNo</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">回款户账号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="returnTrusteeshipbranchName" elementType="Argument">
              <stringProp name="Argument.name">returnTrusteeshipbranchName</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">回款户开户行</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="returnTrusteeshipbranchcnaps" elementType="Argument">
              <stringProp name="Argument.name">returnTrusteeshipbranchcnaps</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">回款户开户行代号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="finalPaymentAccountaccountName" elementType="Argument">
              <stringProp name="Argument.name">finalPaymentAccountaccountName</stringProp>
              <stringProp name="Argument.value">${corpname}</stringProp>
              <stringProp name="Argument.desc">指定接收尾款户账户名</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="finalPaymentAccountaccountNo" elementType="Argument">
              <stringProp name="Argument.name">finalPaymentAccountaccountNo</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">指定接收尾款户账号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="finalPaymentAccountbranchName" elementType="Argument">
              <stringProp name="Argument.name">finalPaymentAccountbranchName</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">指定接收尾款户开户行</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="finalPaymentAccountbranchcnaps" elementType="Argument">
              <stringProp name="Argument.name">finalPaymentAccountbranchcnaps</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">指定接受尾款户开户行代号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="retrieveTrusteeshiptrusteeshipMode" elementType="Argument">
              <stringProp name="Argument.name">retrieveTrusteeshiptrusteeshipMode</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;回收本金账户&quot;托管方式&quot;:&quot;0：账户托管，1：外部账户&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="retrieveTrusteeshipaccountName" elementType="Argument">
              <stringProp name="Argument.name">retrieveTrusteeshipaccountName</stringProp>
              <stringProp name="Argument.value">${orgname}</stringProp>
              <stringProp name="Argument.desc">回收本金账户账户名</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="retrieveTrusteeshipaccountNo" elementType="Argument">
              <stringProp name="Argument.name">retrieveTrusteeshipaccountNo</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">回收本金账户账号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="retrieveTrusteeshipbranchName" elementType="Argument">
              <stringProp name="Argument.name">retrieveTrusteeshipbranchName</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">回收本金账户开户行</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="retrieveTrusteeshipcnaps" elementType="Argument">
              <stringProp name="Argument.name">retrieveTrusteeshipcnaps</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">回收本金账户银行代号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="profitAccountaccountName" elementType="Argument">
              <stringProp name="Argument.name">profitAccountaccountName</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.desc">核心投资收益户账户名</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="profitAccountaccountNo" elementType="Argument">
              <stringProp name="Argument.name">profitAccountaccountNo</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.desc">核心投资收益户账号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="profitAccountbranchName" elementType="Argument">
              <stringProp name="Argument.name">profitAccountbranchName</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.desc">核心投资收益户开户行</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="profitAccountcnaps" elementType="Argument">
              <stringProp name="Argument.name">profitAccountcnaps</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.desc">核心投资收益户银行代号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="institutionAdvanceTrusteeship" elementType="Argument">
              <stringProp name="Argument.name">institutionAdvanceTrusteeship</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">&quot;机构预收款账户托管方式&quot;:&quot;0：账户托管，1：外部账户&quot;,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="institutionAdvanceTrusteeshipaccountName" elementType="Argument">
              <stringProp name="Argument.name">institutionAdvanceTrusteeshipaccountName</stringProp>
              <stringProp name="Argument.value">${orgname}</stringProp>
              <stringProp name="Argument.desc">机构预收款账户账户名</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="institutionAdvanceTrusteeshipaccountNo" elementType="Argument">
              <stringProp name="Argument.name">institutionAdvanceTrusteeshipaccountNo</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">机构预收款账户账号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="institutionAdvanceTrusteeshipbranchName" elementType="Argument">
              <stringProp name="Argument.name">institutionAdvanceTrusteeshipbranchName</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">机构预收款账户开户行</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="institutionAdvanceTrusteeshipcnaps" elementType="Argument">
              <stringProp name="Argument.name">institutionAdvanceTrusteeshipcnaps</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">机构预收款账户开户行代号</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="case_name" elementType="Argument">
              <stringProp name="Argument.name">case_name</stringProp>
              <stringProp name="Argument.value">操作说明</stringProp>
              <stringProp name="Argument.desc">操作说明名称</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="usual  Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="businesscontractfile" elementType="Argument">
              <stringProp name="Argument.name">businesscontractfile</stringProp>
              <stringProp name="Argument.value">D:\JMeter\attachment\1.png</stringProp>
              <stringProp name="Argument.desc">商务合同</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="solution" elementType="Argument">
              <stringProp name="Argument.name">solution</stringProp>
              <stringProp name="Argument.value">925</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="invitecsvFile" elementType="Argument">
              <stringProp name="Argument.name">invitecsvFile</stringProp>
              <stringProp name="Argument.value">D:/JMeter/attachment/cus.csv</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
          <stringProp name="BeanShellSampler.query">${__setProperty(solution_id,${solution},)}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询邀请核心手机号" enabled="true">
          <stringProp name="dataSource">MySQL</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT IFNULL((SELECT invited_contact_cellphone FROM dcf_user.customer_reg_invitation WHERE invited_customer_name=&apos;${corpname}&apos; limit 1),0) as invited_cellphone</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">invited_corp_cellphone</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">${__setProperty(invited_contact_cellphone,${invited_corp_cellphone_1},)}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="邀请客户、注册、认证" enabled="true">
          <stringProp name="IfController.condition">${invited_corp_cellphone_1} == 0</stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="客户类型" enabled="true">
            <stringProp name="BeanShellSampler.query">${__setProperty(invitedCustomerType,&quot;CUSTOMER&quot;,)};
${__setProperty(invite_name,${corpname},)};
${__setProperty(invite_mobile,${corp_mobile},)};</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="写入邀请客户" enabled="false">
            <stringProp name="BeanShellSampler.query">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;

char SEPARATOR = &apos;,&apos;;
public void writeLine(FileWriter writer, String[] params, char separator)
{
  boolean firstParam = true;

  StringBuilder stringBuilder = new StringBuilder();
  String param = &quot;&quot;;
  
  for (int i = 0; i &lt; params.length; i++)
  {
  	param = params[i];
  	log.info(&quot;##############&quot;);
     log.info(param);
     if (!firstParam)
      {
          stringBuilder.append(separator);
      }
      stringBuilder.append(param);
     
      firstParam = false;
  }
  //add to file the line
  log.info(stringBuilder.toString());
  writer.append(stringBuilder.toString());

}

String csvFile = &quot;${invitecsvFile}&quot;; 
log.info(&quot;####################&quot;);
String customer_1;
//String customer_1=&quot;${chainname}&quot;;
vars.put(&quot;cus&quot;,bsh.args[0]);
customer_1=vars.get(&quot;cus&quot;);
log.info(customer_1);
String cus_1=null;
String cus_1 = new String(customer_1.getBytes(&quot;utf-8&quot;),&quot;gbk&quot;);
String[] params = &quot;c_1,c_2&quot;.split(&quot;,&quot;);
params[0]=cus_1;
vars.put(&quot;cel&quot;,bsh.args[1]);
cellphone_1=vars.get(&quot;cel&quot;);
log.info(cellphone_1);
params[1]=cellphone_1;

FileWriter fileWriter = new FileWriter(csvFile);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters">${corpname} ${corp_mobile}</stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="邀请" enabled="true">
            <stringProp name="IncludeController.includepath">D:\JMeter\module\invite1.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="注册认证" enabled="true">
            <stringProp name="IncludeController.includepath">D:\JMeter\module\register1.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询customerID" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="customerName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__property(accountname)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">customerName</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/customer/v1/customer/findCustomerByCustomerName</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
              <collectionProp name="CookieManager.cookies">
                <elementProp name="tk" elementType="Cookie" testname="tk">
                  <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                  <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                  <stringProp name="Cookie.path">/</stringProp>
                  <boolProp name="Cookie.secure">false</boolProp>
                  <longProp name="Cookie.expires">0</longProp>
                  <boolProp name="Cookie.path_specified">true</boolProp>
                  <boolProp name="Cookie.domain_specified">true</boolProp>
                </elementProp>
              </collectionProp>
              <boolProp name="CookieManager.clearEachIteration">false</boolProp>
            </CookieManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1678237625">&quot;customerId&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">customerid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$[0].customerId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="corp_id" enabled="true">
          <stringProp name="dataSource">MySQL</stringProp>
          <stringProp name="query">select customer_id from dcf_customer.customer where customer_name=?;</stringProp>
          <stringProp name="queryArguments">${corpname}</stringProp>
          <stringProp name="queryArgumentsTypes">varchar</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable">result</stringProp>
          <stringProp name="variableNames">corp_id</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="org_id" enabled="true">
          <stringProp name="dataSource">MySQL</stringProp>
          <stringProp name="query">select customer_id from dcf_customer.customer where customer_name=?;</stringProp>
          <stringProp name="queryArguments">${orgname}</stringProp>
          <stringProp name="queryArgumentsTypes">varchar</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable">result</stringProp>
          <stringProp name="variableNames">org_id</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="corp_account_count" enabled="true">
          <stringProp name="dataSource">MySQL</stringProp>
          <stringProp name="query">select count(ID) from dcf_account.t_account where ACCOUNT_NAME =&quot;${corpname}&quot; and ACCOUNT_TYPE=&quot;11&quot;;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable">result</stringProp>
          <stringProp name="variableNames">corp_account_count</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="org_account_count" enabled="true">
          <stringProp name="dataSource">MySQL</stringProp>
          <stringProp name="query">select count(ID) as org_account_count from dcf_account.t_account where ACCOUNT_NAME=&quot;${orgname}&quot; and ACCOUNT_TYPE=&quot;11&quot;;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable">result</stringProp>
          <stringProp name="variableNames">org_account_count</stringProp>
        </JDBCSampler>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>true</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>true</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <fileName>true</fileName>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="org_account_id" enabled="true">
          <stringProp name="dataSource">MySQL</stringProp>
          <stringProp name="query">select ID from dcf_account.t_account where ACCOUNT_NAME=? and ACCOUNT_TYPE=&quot;11&quot;;


</stringProp>
          <stringProp name="queryArguments">${orgname}</stringProp>
          <stringProp name="queryArgumentsTypes">varchar</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as Object</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">org_account_id</stringProp>
        </JDBCSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="设置放款户" enabled="true">
          <stringProp name="IfController.condition">${loanTrusteeshiptrusteeshipMode} == 0</stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="设置机构放款户" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="account_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${org_account_id_1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">account_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v1/customer/searchaccountwithotherinfo</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
              <collectionProp name="CookieManager.cookies">
                <elementProp name="tk" elementType="Cookie" testname="tk">
                  <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                  <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                  <stringProp name="Cookie.path">/</stringProp>
                  <boolProp name="Cookie.secure">false</boolProp>
                  <longProp name="Cookie.expires">0</longProp>
                  <boolProp name="Cookie.path_specified">true</boolProp>
                  <boolProp name="Cookie.domain_specified">true</boolProp>
                </elementProp>
              </collectionProp>
              <boolProp name="CookieManager.clearEachIteration">false</boolProp>
            </CookieManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-824124102">&quot;ret&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="账号" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">loanTrusteeshipaccountNo</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.mappingInfos[0].bankAcctId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="开户行名称" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">loanTrusteeshipbranchName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.mappingInfos[0].bankName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="开户行代号" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">loanTrusteeshipcnaps</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.mappingInfos[0].bankId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="设置放款户为外部户" enabled="true">
          <stringProp name="IfController.condition">${loanTrusteeshiptrusteeshipMode} == 1</stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="设置机构放款户2" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="account_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${org_account_id_1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">account_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v1/customer/searchaccountwithotherinfo</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
              <collectionProp name="CookieManager.cookies">
                <elementProp name="tk" elementType="Cookie" testname="tk">
                  <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                  <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                  <stringProp name="Cookie.path">/</stringProp>
                  <boolProp name="Cookie.secure">false</boolProp>
                  <longProp name="Cookie.expires">0</longProp>
                  <boolProp name="Cookie.path_specified">true</boolProp>
                  <boolProp name="Cookie.domain_specified">true</boolProp>
                </elementProp>
              </collectionProp>
              <boolProp name="CookieManager.clearEachIteration">false</boolProp>
            </CookieManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-824124102">&quot;ret&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="账号" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">loanTrusteeshipaccountNo</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.mappingInfos[0].bankAcctId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="开户行名称" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">loanTrusteeshipbranchName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.mappingInfos[0].bankName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="开户行代号" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">loanTrusteeshipcnaps</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.mappingInfos[0].bankId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="设置外部放款户账号" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="loanTrusteeshipaccountNo" elementType="Argument">
                <stringProp name="Argument.name">loanTrusteeshipaccountNo</stringProp>
                <stringProp name="Argument.value">3100${__time(,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断机构账户个数" enabled="true">
          <stringProp name="IfController.condition">${org_account_count_1}&lt;4</stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="virtualAccountFlag" elementType="Argument">
                <stringProp name="Argument.name">virtualAccountFlag</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.desc">true/false,是否是虚拟户</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bankType" elementType="Argument">
                <stringProp name="Argument.name">bankType</stringProp>
                <stringProp name="Argument.value">02</stringProp>
                <stringProp name="Argument.desc">01中信银行,02交通银行</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询customerID" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="customerName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${orgname}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">customerName</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/customer/v1/customer/findCustomerByCustomerName</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
              <collectionProp name="CookieManager.cookies">
                <elementProp name="tk" elementType="Cookie" testname="tk">
                  <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                  <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                  <stringProp name="Cookie.path">/</stringProp>
                  <boolProp name="Cookie.secure">false</boolProp>
                  <longProp name="Cookie.expires">0</longProp>
                  <boolProp name="Cookie.path_specified">true</boolProp>
                  <boolProp name="Cookie.domain_specified">true</boolProp>
                </elementProp>
              </collectionProp>
              <boolProp name="CookieManager.clearEachIteration">false</boolProp>
            </CookieManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1678237625">&quot;customerId&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">customerid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$[0].customerId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">${__setProperty(accountname,${orgname},)}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="开户" enabled="true">
            <stringProp name="IncludeController.includepath">D:\JMeter\module\depositeaccount.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="org_account_count" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="query">select count(ID) as org_account_count from dcf_account.t_account where ACCOUNT_NAME=&quot;${orgname}&quot; and ACCOUNT_TYPE=&quot;11&quot;;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable">result</stringProp>
            <stringProp name="variableNames">org_account_count</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>true</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>true</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <fileName>true</fileName>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="设置机构回收本金户" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="account_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${org_account_id_1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">account_id</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v1/customer/searchaccountwithotherinfo</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-824124102">&quot;ret&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="账号" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">retrieveTrusteeshipaccountNo</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.mappingInfos[0].bankAcctId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="开户行名称" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">retrieveTrusteeshipbranchName</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.mappingInfos[0].bankName</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="开户行代号" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">retrieveTrusteeshipcnaps</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.mappingInfos[0].bankId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="核心合同-上传商务协议" enabled="true">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${businesscontractfile}" elementType="HTTPFileArg">
                <stringProp name="File.path">${businesscontractfile}</stringProp>
                <stringProp name="File.paramname">files[]</stringProp>
                <stringProp name="File.mimetype"> image/png</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="trade_side" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">trade_side</stringProp>
              </elementProp>
              <elementProp name="press_for_payment" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">press_for_payment</stringProp>
              </elementProp>
              <elementProp name="switch-earning" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">switch-earning</stringProp>
              </elementProp>
              <elementProp name="switch-earning-collector" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">-1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">switch-earning-collector</stringProp>
              </elementProp>
              <elementProp name="prepayment" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">prepayment</stringProp>
              </elementProp>
              <elementProp name="loan_deposit_account" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">loan_deposit_account</stringProp>
              </elementProp>
              <elementProp name="received_payment_account" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">received_payment_account</stringProp>
              </elementProp>
              <elementProp name="cash_deposit_account" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">cash_deposit_account</stringProp>
              </elementProp>
              <elementProp name="recovery_principal_account" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">recovery_principal_account</stringProp>
              </elementProp>
              <elementProp name="digest" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">digest</stringProp>
              </elementProp>
              <elementProp name="digest" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">digest</stringProp>
              </elementProp>
              <elementProp name="digest" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">digest</stringProp>
              </elementProp>
              <elementProp name="digest" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">digest</stringProp>
              </elementProp>
              <elementProp name="digest" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">digest</stringProp>
              </elementProp>
              <elementProp name="fileName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${case_name}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">fileName</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v1/contract/addbusinesscontract</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">COOKIE_businesscontract</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;result&quot;:&quot;(.\d+)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-824124102">&quot;ret&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断投资收益是否开启" enabled="true">
          <stringProp name="IfController.condition">${investmentGainsEnabled} == 1
//判断是否开启投资收益</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断核心是否有账户" enabled="true">
            <stringProp name="IfController.condition">${corp_account_count_1} &lt; 1</stringProp>
            <boolProp name="IfController.evaluateAll">true</boolProp>
          </IfController>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="virtualAccountFlag" elementType="Argument">
                  <stringProp name="Argument.name">virtualAccountFlag</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.desc">true/false,是否是虚拟户</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bankType" elementType="Argument">
                  <stringProp name="Argument.name">bankType</stringProp>
                  <stringProp name="Argument.value">02</stringProp>
                  <stringProp name="Argument.desc">01中信银行,02交通银行</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">${__setProperty(accountname,${corpname},)}</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="开户" enabled="true">
              <stringProp name="IncludeController.includepath">D:\JMeter\module\depositeaccount.jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="corp_account_id" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="query">#查询核心账户ID
select ID from dcf_account.t_account where ACCOUNT_NAME =? and ACCOUNT_TYPE=&quot;11&quot;;</stringProp>
            <stringProp name="queryArguments">${corpname}</stringProp>
            <stringProp name="queryArgumentsTypes">varchar</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as Object</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">corp_account_id</stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询核心账户并设置为投资收益账户" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="account_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${corp_account_id_1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">account_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v1/customer/searchaccountwithotherinfo</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
              <collectionProp name="CookieManager.cookies">
                <elementProp name="tk" elementType="Cookie" testname="tk">
                  <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                  <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                  <stringProp name="Cookie.path">/</stringProp>
                  <boolProp name="Cookie.secure">false</boolProp>
                  <longProp name="Cookie.expires">0</longProp>
                  <boolProp name="Cookie.path_specified">true</boolProp>
                  <boolProp name="Cookie.domain_specified">true</boolProp>
                </elementProp>
              </collectionProp>
              <boolProp name="CookieManager.clearEachIteration">false</boolProp>
            </CookieManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-824124102">&quot;ret&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="投资收益账户账号" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">profitAccountaccountNo</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.mappingInfos[0].bankAcctId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="投资收益账户开户行名称" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">profitAccountbranchName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.mappingInfos[0].bankName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="投资收益账户开户行代号" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">profitAccountcnaps</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.mappingInfos[0].bankId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断核心是否为卖家" enabled="true">
          <stringProp name="IfController.condition">${buyerOrSeller} == 1
//判断核心是否为卖家</stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断核心的账户数目" enabled="true">
            <stringProp name="IfController.condition">${corp_account_count_1} &lt; 1</stringProp>
            <boolProp name="IfController.evaluateAll">true</boolProp>
          </IfController>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="virtualAccountFlag" elementType="Argument">
                  <stringProp name="Argument.name">virtualAccountFlag</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.desc">true/false,是否是虚拟户</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bankType" elementType="Argument">
                  <stringProp name="Argument.name">bankType</stringProp>
                  <stringProp name="Argument.value">02</stringProp>
                  <stringProp name="Argument.desc">01中信银行,02交通银行</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">${__setProperty(accountname,${corpname},)}</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="开户" enabled="true">
              <stringProp name="IncludeController.includepath">D:\JMeter\module\depositeaccount.jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="corp_account_id" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="query">#查询核心账户ID
select ID from dcf_account.t_account where ACCOUNT_NAME =? and ACCOUNT_TYPE=&quot;11&quot;;</stringProp>
            <stringProp name="queryArguments">${corpname}</stringProp>
            <stringProp name="queryArgumentsTypes">varchar</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as Object</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">corp_account_id</stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询核心账户并把最新开的通用结算户设置为融资户" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="account_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${corp_account_id_1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">account_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v1/customer/searchaccountwithotherinfo</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
              <collectionProp name="CookieManager.cookies">
                <elementProp name="tk" elementType="Cookie" testname="tk">
                  <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                  <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                  <stringProp name="Cookie.path">/</stringProp>
                  <boolProp name="Cookie.secure">false</boolProp>
                  <longProp name="Cookie.expires">0</longProp>
                  <boolProp name="Cookie.path_specified">true</boolProp>
                  <boolProp name="Cookie.domain_specified">true</boolProp>
                </elementProp>
              </collectionProp>
              <boolProp name="CookieManager.clearEachIteration">false</boolProp>
            </CookieManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-824124102">&quot;ret&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="融资户账号" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">loanAccountNo</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.mappingInfos[0].bankAcctId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="融资户开户行名称" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">loanAccountbranchName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.mappingInfos[0].bankName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="融资户开户行代号" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">loanAccountbranchcnaps</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.mappingInfos[0].bankId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="指定接收尾款户账号" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">finalPaymentAccountaccountNo</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.mappingInfos[0].bankAcctId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="指定接收尾款户开户行名称" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">finalPaymentAccountbranchName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.mappingInfos[0].bankName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="指定接收尾款户开户行代号" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">finalPaymentAccountbranchcnaps</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.mappingInfos[0].bankId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断机构账户个数" enabled="true">
            <stringProp name="IfController.condition">${org_account_count_1} &lt; 1
//判断机构账户个数</stringProp>
            <boolProp name="IfController.evaluateAll">true</boolProp>
          </IfController>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="virtualAccountFlag" elementType="Argument">
                  <stringProp name="Argument.name">virtualAccountFlag</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.desc">true/false,是否是虚拟户</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bankType" elementType="Argument">
                  <stringProp name="Argument.name">bankType</stringProp>
                  <stringProp name="Argument.value">02</stringProp>
                  <stringProp name="Argument.desc">01中信银行,02交通银行</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">${__setProperty(accountname,${orgname},)}</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="开户" enabled="true">
              <stringProp name="IncludeController.includepath">D:\JMeter\module\depositeaccount.jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="org_account_id" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="query">select ID from dcf_account.t_account where ACCOUNT_NAME=? and ACCOUNT_TYPE=&quot;11&quot;;


</stringProp>
            <stringProp name="queryArguments">${orgname}</stringProp>
            <stringProp name="queryArgumentsTypes">varchar</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as Object</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">org_account_id</stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查机构账户并把最新开的通用结算户设置为回款户" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="account_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${org_account_id_1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">account_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v1/customer/searchaccountwithotherinfo</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
              <collectionProp name="CookieManager.cookies">
                <elementProp name="tk" elementType="Cookie" testname="tk">
                  <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                  <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                  <stringProp name="Cookie.path">/</stringProp>
                  <boolProp name="Cookie.secure">false</boolProp>
                  <longProp name="Cookie.expires">0</longProp>
                  <boolProp name="Cookie.path_specified">true</boolProp>
                  <boolProp name="Cookie.domain_specified">true</boolProp>
                </elementProp>
              </collectionProp>
              <boolProp name="CookieManager.clearEachIteration">false</boolProp>
            </CookieManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-824124102">&quot;ret&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="账号" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">returnTrusteeshipaccountNo</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.mappingInfos[0].bankAcctId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="开户行名称" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">returnTrusteeshipbranchName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.mappingInfos[0].bankName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="开户行代号" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">returnTrusteeshipbranchcnaps</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.mappingInfos[0].bankId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="预付开启" enabled="true">
          <stringProp name="IfController.condition">${algorithm} == 2</stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断机构账户个数" enabled="true">
            <stringProp name="IfController.condition">${org_account_count_1} &lt; 1
//判断机构账户个数</stringProp>
            <boolProp name="IfController.evaluateAll">true</boolProp>
          </IfController>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="virtualAccountFlag" elementType="Argument">
                  <stringProp name="Argument.name">virtualAccountFlag</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.desc">true/false,是否是虚拟户</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bankType" elementType="Argument">
                  <stringProp name="Argument.name">bankType</stringProp>
                  <stringProp name="Argument.value">02</stringProp>
                  <stringProp name="Argument.desc">01中信银行,02交通银行</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">${__setProperty(accountname,${orgname},)}</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="开户" enabled="true">
              <stringProp name="IncludeController.includepath">D:\JMeter\module\depositeaccount.jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="org_account_id" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="query">select ID from dcf_account.t_account where ACCOUNT_NAME=? and ACCOUNT_TYPE=&quot;11&quot;;


</stringProp>
            <stringProp name="queryArguments">${orgname}</stringProp>
            <stringProp name="queryArgumentsTypes">varchar</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as Object</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">org_account_id</stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询机构账户，把第一个账户设置为预收户" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="account_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${org_account_id_1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">account_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v1/customer/searchaccountwithotherinfo</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
              <collectionProp name="CookieManager.cookies">
                <elementProp name="tk" elementType="Cookie" testname="tk">
                  <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                  <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                  <stringProp name="Cookie.path">/</stringProp>
                  <boolProp name="Cookie.secure">false</boolProp>
                  <longProp name="Cookie.expires">0</longProp>
                  <boolProp name="Cookie.path_specified">true</boolProp>
                  <boolProp name="Cookie.domain_specified">true</boolProp>
                </elementProp>
              </collectionProp>
              <boolProp name="CookieManager.clearEachIteration">false</boolProp>
            </CookieManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-824124102">&quot;ret&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="账号" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">institutionAdvanceTrusteeshipaccountNo</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.mappingInfos[0].bankAcctId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="开户行名称" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">institutionAdvanceTrusteeshipbranchName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.mappingInfos[0].bankName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="开户行代号" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">institutionAdvanceTrusteeshipcnaps</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.mappingInfos[0].bankId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断核心的账户数目" enabled="true">
            <stringProp name="IfController.condition">${corp_account_count_1} &lt; 1</stringProp>
            <boolProp name="IfController.evaluateAll">true</boolProp>
          </IfController>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="virtualAccountFlag" elementType="Argument">
                  <stringProp name="Argument.name">virtualAccountFlag</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.desc">true/false,是否是虚拟户</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bankType" elementType="Argument">
                  <stringProp name="Argument.name">bankType</stringProp>
                  <stringProp name="Argument.value">02</stringProp>
                  <stringProp name="Argument.desc">01中信银行,02交通银行</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">${__setProperty(accountname,${corpname},)}</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="开户" enabled="true">
              <stringProp name="IncludeController.includepath">D:\JMeter\module\depositeaccount.jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="corp_account_id" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="query">#查询核心账户ID
select ID from dcf_account.t_account where ACCOUNT_NAME =? and ACCOUNT_TYPE=&quot;11&quot;;</stringProp>
            <stringProp name="queryArguments">${corpname}</stringProp>
            <stringProp name="queryArgumentsTypes">varchar</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as Object</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">corp_account_id</stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询核心账户并把最新开的通用结算户设置为尾款户" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="account_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${corp_account_id_1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">account_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v1/customer/searchaccountwithotherinfo</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
              <collectionProp name="CookieManager.cookies">
                <elementProp name="tk" elementType="Cookie" testname="tk">
                  <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                  <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                  <stringProp name="Cookie.path">/</stringProp>
                  <boolProp name="Cookie.secure">false</boolProp>
                  <longProp name="Cookie.expires">0</longProp>
                  <boolProp name="Cookie.path_specified">true</boolProp>
                  <boolProp name="Cookie.domain_specified">true</boolProp>
                </elementProp>
              </collectionProp>
              <boolProp name="CookieManager.clearEachIteration">false</boolProp>
            </CookieManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-824124102">&quot;ret&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="指定接收尾款户账号" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">finalPaymentAccountaccountNo</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.mappingInfos[0].bankAcctId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="指定接收尾款户开户行名称" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">finalPaymentAccountbranchName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.mappingInfos[0].bankName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="指定接收尾款户开户行代号" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">finalPaymentAccountbranchcnaps</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.mappingInfos[0].bankId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="新建核心合同" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="contract" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">{ 	&quot;solutionId&quot;: &quot;${__property(solution_id)}&quot;, 	&quot;customerId&quot;: &quot;${corp_id_1}&quot;, 	&quot;customerName&quot;: &quot;${corpname}&quot;, 	&quot;buyerOrSeller&quot;: &quot;${buyerOrSeller}&quot;, 	&quot;paymentSummary&quot;: [{ 		&quot;fundUse&quot;: &quot;1&quot;, 		&quot;name&quot;: &quot;&quot; 	}, { 		&quot;fundUse&quot;: &quot;2&quot;, 		&quot;name&quot;: &quot;&quot; 	}, { 		&quot;fundUse&quot;: &quot;4&quot;, 		&quot;name&quot;: &quot;&quot; 	}, { 		&quot;fundUse&quot;: &quot;3&quot;, 		&quot;name&quot;: &quot;&quot; 	}, { 		&quot;fundUse&quot;: &quot;5&quot;, 		&quot;name&quot;: &quot;&quot; 	}], 	&quot;investmentGainsEnabled&quot;: &quot;${investmentGainsEnabled}&quot;, 	&quot;quota&quot;: ${quota}, 	&quot;creditRate&quot;: &quot;${creditRate}&quot;, 	&quot;securityDepositRate&quot;: &quot;${securityDepositRate}&quot;, 	&quot;validity&quot;: &quot;12&quot;, 	&quot;loanAccount&quot;: { 		&quot;accountName&quot;: &quot;${loanAccountName}&quot;, 		&quot;accountNo&quot;: &quot;${loanAccountNo}&quot;, 		&quot;branchName&quot;: &quot;${loanAccountbranchName}&quot;, 		&quot;cnaps&quot;: &quot;${loanAccountbranchcnaps}&quot; 	}, 	&quot;chargeRules&quot;: [{ 		&quot;period&quot;: &quot;${chargeRulesperiod}&quot;, 		&quot;chargerId&quot;: &quot;${chargeRuleschargerId}&quot;, 		&quot;payerId&quot;: &quot;${chargeRulespayerId}&quot;, 		&quot;chargeCategory&quot;: &quot;${chargeRuleschargeCategory}&quot;, 		&quot;paymentBase&quot;: &quot;${chargeRulespaymentBase}&quot;, 		&quot;chargePoint&quot;: &quot;${chargeRuleschargePoint}&quot;, 		&quot;chargeType&quot;: &quot;${chargeRuleschargeType}&quot;, 		&quot;baseInterestRateType&quot;: &quot;${chargeRulesbaseInterestRateType}&quot;, 		&quot;chargeTypeValue&quot;: &quot;${chargeRulesValue}&quot; 	}], 	&quot;loanTrusteeship&quot;: { 		&quot;trusteeshipMode&quot;: &quot;${loanTrusteeshiptrusteeshipMode}&quot;, 		&quot;account&quot;: { 			&quot;accountName&quot;: &quot;${loanTrusteeshipaccountName}&quot;, 			&quot;accountNo&quot;: &quot;${loanTrusteeshipaccountNo}&quot;, 			&quot;branchName&quot;: &quot;${loanTrusteeshipbranchName}&quot;, 			&quot;cnaps&quot;: &quot;${loanTrusteeshipcnaps}&quot; 		} 	}, 	&quot;returnTrusteeship&quot;: { 		&quot;trusteeshipMode&quot;: 0, 		&quot;account&quot;: { 			&quot;accountName&quot;: &quot;${returnTrusteeshipaccountName}&quot;, 			&quot;accountNo&quot;: &quot;${returnTrusteeshipaccountNo}&quot;, 			&quot;branchName&quot;: &quot;${returnTrusteeshipbranchName}&quot;, 			&quot;cnaps&quot;: &quot;${returnTrusteeshipbranchcnaps}&quot; 		} 	}, 	&quot;finalPaymentAccount&quot;: { 		&quot;accountName&quot;: &quot;${finalPaymentAccountaccountName}&quot;, 		&quot;accountNo&quot;: &quot;${finalPaymentAccountaccountNo}&quot;, 		&quot;branchName&quot;: &quot;${finalPaymentAccountbranchName}&quot;, 		&quot;cnaps&quot;: &quot;${finalPaymentAccountbranchcnaps}&quot; 	}, 	&quot;securityDepositTrusteeship&quot;: { 		&quot;trusteeshipMode&quot;: &quot;0&quot; 	}, 	&quot;retrieveTrusteeship&quot;: { 		&quot;trusteeshipMode&quot;: &quot;0&quot;, 		&quot;account&quot;: { 			&quot;accountName&quot;: &quot;${retrieveTrusteeshipaccountName}&quot;, 			&quot;accountNo&quot;: &quot;${retrieveTrusteeshipaccountNo}&quot;, 			&quot;branchName&quot;: &quot;${retrieveTrusteeshipbranchName}&quot;, 			&quot;cnaps&quot;: &quot;${retrieveTrusteeshipcnaps}&quot; 		} 	}, 	&quot;labelList&quot;: [{ 		&quot;projectName&quot;: &quot;${projectName}&quot; 	}], 	&quot;projectName&quot;: &quot;${projectName}&quot;, 	&quot;infoFlowMode&quot;: &quot;${infoFlowMode}&quot;, 	&quot;capitalOrderMappingMethod&quot;: &quot;${capitalOrderMappingMethod}&quot;, 	&quot;autoMatch&quot;: { 		&quot;algorithm&quot;: &quot;${algorithm}&quot;, 		&quot;triggerRule&quot;:&quot; ${triggerRule}&quot; 	}, 	&quot;capitalFlowMode&quot;: &quot;${capitalFlowMode}&quot;, 	&quot;repaymentModel&quot;: &quot;${repaymentModel}&quot;, 	&quot;openAccountMode&quot;: &quot;0&quot;, 	&quot;openBank&quot;: &quot;中信银行&quot;, 	&quot;institutionAdvanceTrusteeship&quot;: { 		&quot;trusteeshipMode&quot;: &quot;${institutionAdvanceTrusteeship}&quot;, 		&quot;account&quot;: { 			&quot;accountName&quot;: &quot;${institutionAdvanceTrusteeshipaccountName}&quot;, 			&quot;accountNo&quot;: &quot;${institutionAdvanceTrusteeshipaccountNo}&quot;, 			&quot;branchName&quot;: &quot;${institutionAdvanceTrusteeshipbranchName}&quot;, 			 &quot;cnaps&quot;: &quot;${institutionAdvanceTrusteeshipcnaps}&quot; 		} 	} } }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">contract</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v1/contract/registercorenew</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-824124102">&quot;ret&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">corp_contract_pkey</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;message&quot;:&quot;(.\d+)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
          <stringProp name="BeanShellSampler.query">${__setProperty(corp_contract_pkey1,${corp_contract_pkey},)}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="创建服务协议" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="customer_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${corp_id_1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">customer_id</stringProp>
              </elementProp>
              <elementProp name="service_code" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">service_code</stringProp>
              </elementProp>
              <elementProp name="doctype_code" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">doctype_code</stringProp>
              </elementProp>
              <elementProp name="contract_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${corp_contract_pkey}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">contract_id</stringProp>
              </elementProp>
              <elementProp name="case_attachment_ids" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${COOKIE_businesscontract}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">case_attachment_ids</stringProp>
              </elementProp>
              <elementProp name="case_name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${case_name}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">case_name</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v1/customer/oc/createServiceInfo</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-824124102">&quot;ret&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request-查询合同ID" enabled="true">
          <stringProp name="dataSource">MySQL</stringProp>
          <stringProp name="query">select contract_id from dcf_contract.t_contract where contract_pkey=? </stringProp>
          <stringProp name="queryArguments">${corp_contract_pkey}</stringProp>
          <stringProp name="queryArgumentsTypes">bigint</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">contract_code</stringProp>
        </JDBCSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="开始启用合同" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="customerName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${corpame}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">customerName</stringProp>
              </elementProp>
              <elementProp name="id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${corp_contract_pkey}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">id</stringProp>
              </elementProp>
              <elementProp name="contract_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${contract_code_1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">contract_id</stringProp>
              </elementProp>
              <elementProp name="institutionName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${orgname}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">institutionName</stringProp>
              </elementProp>
              <elementProp name="solutionName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__prpperty(solution1)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">solutionName</stringProp>
              </elementProp>
              <elementProp name="productName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__property(newproduct1)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">productName</stringProp>
              </elementProp>
              <elementProp name="customerType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">customerType</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/view/op/product/contractStartUsing</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          </CookieManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1477249802">200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询合同协议pkey" enabled="true">
          <stringProp name="dataSource">MySQL</stringProp>
          <stringProp name="query">select contract_agreement_pkey,contract_agreement_id from dcf_contract.t_contract_agreement where contract_id=? </stringProp>
          <stringProp name="queryArguments">${corp_contract_pkey}</stringProp>
          <stringProp name="queryArgumentsTypes">bigint</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">contract_agreement_pkey,contract_agreement_id</stringProp>
        </JDBCSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="启用核心合同" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="contract_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${corp_contract_pkey}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">contract_id</stringProp>
              </elementProp>
              <elementProp name="agreement_json" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{ 	&quot;attachment&quot;: {}, 	&quot;id&quot;: &quot;${contract_agreement_pkey_1}&quot;, 	&quot;agreementId&quot;: &quot;${contract_agreement_id_1}&quot;, 	&quot;signDate&quot;: 1543161600000, 	&quot;dueDate&quot;: 1574611200000, 	&quot;firstSide&quot;: { 		&quot;id&quot;: &quot;${org_id_1}&quot;, 		&quot;customerName&quot;: &quot;${orgname}&quot;, 		&quot;customerType&quot;: &quot;ORG&quot; 	}, 	&quot;secondSide&quot;: { 		&quot;id&quot;: &quot;${corp_id_1}&quot;, 		&quot;customerName&quot;: &quot;${corpname}&quot; 	} }]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">agreement_json</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v1/contract/enable</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          </CookieManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1243357182">{&quot;ret&quot;:1}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="上传关联方合同" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">50</stringProp>
        <stringProp name="ThreadGroup.delay">120</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="corp_contract_pkey" elementType="Argument">
              <stringProp name="Argument.name">corp_contract_pkey</stringProp>
              <stringProp name="Argument.value">17588</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">核心合同ID</stringProp>
            </elementProp>
            <elementProp name="uploadexcelFileName" elementType="Argument">
              <stringProp name="Argument.name">uploadexcelFileName</stringProp>
              <stringProp name="Argument.value">D:/JMeter/attachment/chain_contract.xlsx</stringProp>
              <stringProp name="Argument.desc">关联方合同地址</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="uploadServiceFile" elementType="Argument">
              <stringProp name="Argument.name">uploadServiceFile</stringProp>
              <stringProp name="Argument.value">D:\JMeter\attachment\1.png</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="invitecsvFile" elementType="Argument">
              <stringProp name="Argument.name">invitecsvFile</stringProp>
              <stringProp name="Argument.value">D:/JMeter/attachment/cus.csv</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
          <stringProp name="BeanShellSampler.query">${__setProperty(corp_contract_pkey1,${corp_contract_pkey},)}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询邀请链属手机号" enabled="true">
          <stringProp name="dataSource">MySQL</stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="query">SELECT IFNULL((SELECT invited_contact_cellphone FROM dcf_user.customer_reg_invitation WHERE invited_customer_name=&apos;${chainname}&apos; limit 1),0) as invited_cellphone
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">invited_chain_cellphone</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">${__setProperty(invited_contact_cellphone,${invited_chain_cellphone_1},)}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="邀请链属、注册、认证" enabled="true">
          <stringProp name="IfController.condition">${invited_chain_cellphone_1} == 0</stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="客户类型" enabled="true">
            <stringProp name="BeanShellSampler.query">${__setProperty(invitedCustomerType,&quot;CUSTOMER&quot;,)};
${__setProperty(invite_name,${chainname},)};
${__setProperty(invite_mobile,${chain_mobile},)};</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="写入邀请客户" enabled="false">
            <stringProp name="BeanShellSampler.query">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;

char SEPARATOR = &apos;,&apos;;
public void writeLine(FileWriter writer, String[] params, char separator)
{
  boolean firstParam = true;

  StringBuilder stringBuilder = new StringBuilder();
  String param = &quot;&quot;;
  
  for (int i = 0; i &lt; params.length; i++)
  {
  	param = params[i];
  	log.info(&quot;##################&quot;);
     log.info(param);
     if (!firstParam)
      {
          stringBuilder.append(separator);
      }
      stringBuilder.append(param);
     
      firstParam = false;
  }
  //add to file the line
  log.info(stringBuilder.toString());
  writer.append(stringBuilder.toString());

}

String csvFile = &quot;${invitecsvFile}&quot;; 
log.info(&quot;####################&quot;);
String customer_1;
//String customer_1=&quot;${chainname}&quot;;
vars.put(&quot;cus&quot;,bsh.args[0]);
customer_1=vars.get(&quot;cus&quot;);
log.info(&quot;customer_1----------------&quot;+customer_1);
String cus_1=null;
String cus_1 = new String(customer_1.getBytes(&quot;utf-8&quot;),&quot;gbk&quot;);
String[] params = &quot;c_1,c_2&quot;.split(&quot;,&quot;);
params[0]=cus_1;
vars.put(&quot;cel&quot;,bsh.args[1]);
cellphone_1=vars.get(&quot;cel&quot;);
log.info(&quot;cellphone_1----------------&quot;+cellphone_1);
params[1]=cellphone_1;

FileWriter fileWriter = new FileWriter(csvFile);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters">${chainname} ${chain_mobile}</stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="邀请" enabled="true">
            <stringProp name="IncludeController.includepath">D:\JMeter\module\invite1.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="注册认证" enabled="true">
            <stringProp name="IncludeController.includepath">D:\JMeter\module\register1.jmx</stringProp>
          </IncludeController>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request-查询链属customerID" enabled="true">
          <stringProp name="dataSource">MySQL</stringProp>
          <stringProp name="query">select customer_id from dcf_customer.customer where customer_name=?</stringProp>
          <stringProp name="queryArguments">${chainname}</stringProp>
          <stringProp name="queryArgumentsTypes">varchar</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">chain_id</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="chain_account_count" enabled="true">
          <stringProp name="dataSource">MySQL</stringProp>
          <stringProp name="query">select count(ID) from dcf_account.t_account where ACCOUNT_NAME=&quot;${chainname}&quot; and ACCOUNT_TYPE=&quot;11&quot;;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable">result</stringProp>
          <stringProp name="variableNames">chain_account_count</stringProp>
        </JDBCSampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="判断链属账户个数" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(${chain_account_count_1}&lt;2)}</stringProp>
        </WhileController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="virtualAccountFlag" elementType="Argument">
                <stringProp name="Argument.name">virtualAccountFlag</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.desc">true/false,是否是虚拟户</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bankType" elementType="Argument">
                <stringProp name="Argument.name">bankType</stringProp>
                <stringProp name="Argument.value">02</stringProp>
                <stringProp name="Argument.desc">01中信银行,02交通银行</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">${__setProperty(accountname,${chainname},)}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="开户" enabled="true">
            <stringProp name="IncludeController.includepath">D:\JMeter\module\depositeaccount.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="chain_account_count" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="query">select count(ID) from dcf_account.t_account where ACCOUNT_NAME=&quot;${chainname}&quot; and ACCOUNT_TYPE=&quot;11&quot;;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">chain_account_count</stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="chain_account_id" enabled="true">
          <stringProp name="dataSource">MySQL</stringProp>
          <stringProp name="query">select ID from dcf_account.t_account where ACCOUNT_NAME=? and ACCOUNT_TYPE=&quot;11&quot;;


</stringProp>
          <stringProp name="queryArguments">${chainname}</stringProp>
          <stringProp name="queryArgumentsTypes">varchar</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as Object</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">chain_account_id</stringProp>
        </JDBCSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="设置链属回款户" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="account_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${chain_account_id_1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">account_id</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v1/customer/searchaccountwithotherinfo</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-824124102">&quot;ret&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="账号" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">chain_bankCardNo</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.mappingInfos[0].bankAcctId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="开户行名称" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">chain_bankName</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.mappingInfos[0].bankName</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="合同参数模板" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;

import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public static String  FILE_PATH=&quot;${uploadexcelFileName}&quot;;
	
XSSFWorkbook workbook = null;
InputStream inputStream=null;
try
{
    //读取Excel文件
	inputStream= new FileInputStream(FILE_PATH);
	workbook = new XSSFWorkbook(inputStream);
	inputStream.close();
} 
catch (Exception e)
{
    e.printStackTrace();
}

for (int numSheet = 0; numSheet &lt; workbook.getNumberOfSheets(); numSheet++) 
{
    workbook.getSheetAt(numSheet);
}

XSSFSheet sheet = workbook.getSheetAt(0);
if (sheet != null)
{
    // 循环行
    for (int rowNum = 1; rowNum &lt;= sheet.getLastRowNum(); rowNum++) 
	{
        XSSFRow row = sheet.getRow(rowNum);
        if (row == null)
		{
            continue;// 忽略并继续读取
        }
        XSSFCell cell = row.getCell(0);
        cell.setCellValue(&quot;${corpname}&quot;);
        System.out.println(&quot;cell.getStringCellValue0():&quot; + cell.getStringCellValue());
      
        cell = row.getCell(1);
        cell.setCellValue(&quot;${chainname}&quot;);
        System.out.println(&quot;cell.getStringCellValue1():&quot; + cell.getStringCellValue());
       
        
        cell = row.getCell(13);
        cell.setCellValue(&quot;${chainname}&quot;);
        System.out.println(&quot;cell.getStringCellValue13():&quot; + cell.getStringCellValue());
       
        cell = row.getCell(14);
        cell.setCellValue(&quot;${chain_bankCardNo}&quot;);
        System.out.println(&quot;cell.getStringCellValue14():&quot; + cell.getStringCellValue());

        cell = row.getCell(15);
        cell.setCellValue(&quot;${chain_bankName}&quot;);
        System.out.println(&quot;cell.getStringCellValue15():&quot; + cell.getStringCellValue());

       /*
        cell = row.getCell(17);
        cell.setCellValue(&quot;F&quot;);
        System.out.println(&quot;cell.getStringCellValue17():&quot; + cell.getStringCellValue());
        */
   }
}
				
try 
{
	FileOutputStream fis = new FileOutputStream(FILE_PATH);
	workbook.write(fis);
	fis.close();

} 
catch (IOException e) 
{
	// TODO Auto-generated catch block
	e.printStackTrace();
}




</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传关联方合同-选择文件" enabled="true">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${uploadexcelFileName}" elementType="HTTPFileArg">
                <stringProp name="File.path">${uploadexcelFileName}</stringProp>
                <stringProp name="File.paramname">files[]</stringProp>
                <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v1/attachment/add</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-824124102">&quot;ret&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">config_file_id</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;result&quot;:&quot;(.\d+)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登记关联方合同" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="config_file_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${config_file_id}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">config_file_id</stringProp>
              </elementProp>
              <elementProp name="parent_contract_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__property(corp_contract_pkey1)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">parent_contract_id</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v1/contract/registersub</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-824124102">&quot;ret&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查看关联方合同ID" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="page" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">page</stringProp>
              </elementProp>
              <elementProp name="page_size" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">20</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">page_size</stringProp>
              </elementProp>
              <elementProp name="customer_name" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">customer_name</stringProp>
              </elementProp>
              <elementProp name="contract_states" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[0,1,2,3,4]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">contract_states</stringProp>
              </elementProp>
              <elementProp name="parent_contract_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__property(corp_contract_pkey1)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">parent_contract_id</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v1/contract/search</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-824124102">&quot;ret&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">chain_contract_id</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.results[0].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询服务审核信息" enabled="true">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${uploadServiceFile}" elementType="HTTPFileArg">
                <stringProp name="File.path">${uploadServiceFile}</stringProp>
                <stringProp name="File.paramname">files[]</stringProp>
                <stringProp name="File.mimetype"> image/png</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="service_code" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">service_code</stringProp>
              </elementProp>
              <elementProp name="contract_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${chain_contract_id}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">contract_id</stringProp>
              </elementProp>
              <elementProp name="customer_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${chain_id_1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">customer_id</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/v1/customer/oc/queryServiceInfo</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1206817697">{&quot;ret&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">ServiceInfostatus</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.status</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断是否需要服务审核" enabled="true">
          <stringProp name="IfController.condition">${ServiceInfostatus}==0</stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传贸易审核资料" enabled="true">
            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
              <collectionProp name="HTTPFileArgs.files">
                <elementProp name="${uploadServiceFile}" elementType="HTTPFileArg">
                  <stringProp name="File.path">${uploadServiceFile}</stringProp>
                  <stringProp name="File.paramname">files[]</stringProp>
                  <stringProp name="File.mimetype"> image/png</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="customer_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${chain_id_1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">customer_id</stringProp>
                </elementProp>
                <elementProp name="contract_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${chain_contract_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">contract_id</stringProp>
                </elementProp>
                <elementProp name="case_code" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">case_code</stringProp>
                </elementProp>
                <elementProp name="sign_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">sign_type</stringProp>
                </elementProp>
                <elementProp name="service_code" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">service_code</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/v1/customer/oc/uploadServiceFile</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value"> multipart/form-data</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
              <collectionProp name="CookieManager.cookies">
                <elementProp name="tk" elementType="Cookie" testname="tk">
                  <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                  <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                  <stringProp name="Cookie.path">/</stringProp>
                  <boolProp name="Cookie.secure">false</boolProp>
                  <longProp name="Cookie.expires">0</longProp>
                  <boolProp name="Cookie.path_specified">true</boolProp>
                  <boolProp name="Cookie.domain_specified">true</boolProp>
                </elementProp>
              </collectionProp>
              <boolProp name="CookieManager.clearEachIteration">false</boolProp>
            </CookieManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">operationDocId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;result&quot;:&quot;(.\d+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-824124102">&quot;ret&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">300</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="服务审核" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="customer_service" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;customerId&quot;:&quot;${chain_id_1}&quot;,&quot;contractId&quot;:&quot;${chain_contract_id}&quot;,&quot;code&quot;:1,&quot;doctypeList&quot;:[{&quot;docTypeCode&quot;:1,&quot;caseList&quot;:[{&quot;caseCode&quot;:&quot;1&quot;,&quot;status&quot;:&quot;2&quot;,&quot;reason&quot;:&quot;0&quot;,&quot;reasonDesc&quot;:&quot;内容模糊不清&quot;}]}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">customer_service</stringProp>
                </elementProp>
                <elementProp name="is_commit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">is_commit</stringProp>
                </elementProp>
                <elementProp name="signatory" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${chainname}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">signatory</stringProp>
                </elementProp>
                <elementProp name="sign_date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1538352000000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">sign_date</stringProp>
                </elementProp>
                <elementProp name="contract_expire_time" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1538438400000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">contract_expire_time</stringProp>
                </elementProp>
                <elementProp name="have_contract_account_period" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">have_contract_account_period</stringProp>
                </elementProp>
                <elementProp name="have_final_expire_date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">have_final_expire_date</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v1/customer/oc/verifyServiceFile</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1243357182">{&quot;ret&quot;:1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
              <collectionProp name="CookieManager.cookies">
                <elementProp name="tk" elementType="Cookie" testname="tk">
                  <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                  <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                  <stringProp name="Cookie.path">/</stringProp>
                  <boolProp name="Cookie.secure">false</boolProp>
                  <longProp name="Cookie.expires">0</longProp>
                  <boolProp name="Cookie.path_specified">true</boolProp>
                  <boolProp name="Cookie.domain_specified">true</boolProp>
                </elementProp>
              </collectionProp>
              <boolProp name="CookieManager.clearEachIteration">false</boolProp>
            </CookieManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="核心企业端登录" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询企业超管手机号" enabled="true">
          <stringProp name="dataSource">MySQL</stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="query">SELECT cellphone FROM dcf_user.qx_user WHERE user_id=(SELECT c.user_id FROM
(SELECT user_id,customer_name FROM dcf_user.qx_user_customer as a  
RIGHT JOIN (SELECT DISTINCT(uc_id) FROM dcf_user.qx_user_role WHERE role_id =&apos;10&apos;) as b
ON a.id = b.uc_id ) as c WHERE c.customer_name=?)</stringProp>
          <stringProp name="queryArguments">${corpname}</stringProp>
          <stringProp name="queryArgumentsTypes">varchar</stringProp>
          <stringProp name="variableNames">corpcellphone</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="核心企业端登录" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;cellphone&quot;:&quot;${corpcellphone_1}&quot;,&quot;password&quot;:&quot;${password}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">HTTP</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/user/v2/public/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="提取核心cookie" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">corp_cookie</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;token&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="设置核心cookie" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters">${corp_cookie}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//string COOKIE_tk=bsh.args[0];
${__setProperty(requestToken,${corp_cookie},)}; 
//${__property(requestToken)}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="jdbc查询核心ID" enabled="true">
          <stringProp name="dataSource">MySQL</stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="query">select customer_id from dcf_customer.customer where customer_name=?</stringProp>
          <stringProp name="queryArguments">${corpname}</stringProp>
          <stringProp name="queryArgumentsTypes">varchar</stringProp>
          <stringProp name="variableNames">corp_id</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询企业列表" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;pageNo&quot;:0,&quot;pageSize&quot;:10}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/user/v2/listCustomer</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="设置核心cookie" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${__property(requestToken)}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON 取出核心企业ID" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">corpcustomerId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.customers.content[?(@.customerName==&apos;${corpname}&apos;)].customerId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="Scope.variable"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="切换核心企业" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;customerId&quot;:&quot;${corp_id_1}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/user/v2/login/switchCustomer</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="设置核心cookie" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${__property(requestToken)}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="核心上传流水" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">30</stringProp>
        <stringProp name="ThreadGroup.delay">2</stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="自定义变量值" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="documentType" elementType="Argument">
              <stringProp name="Argument.name">documentType</stringProp>
              <stringProp name="Argument.value">应付</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">单据类型</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="jdbc查询核心ID" enabled="true">
          <stringProp name="dataSource">MySQL</stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="query">select customer_id from dcf_customer.customer where customer_name=?</stringProp>
          <stringProp name="queryArguments">${corpname}</stringProp>
          <stringProp name="queryArgumentsTypes">varchar</stringProp>
          <stringProp name="variableNames">corp_id</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="调取java包上传流水" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="authServerUrl" elementType="Argument">
                <stringProp name="Argument.name">authServerUrl</stringProp>
                <stringProp name="Argument.value">localhost:10007</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="authCheckUrl" elementType="Argument">
                <stringProp name="Argument.name">authCheckUrl</stringProp>
                <stringProp name="Argument.value">wuat.dcfservice.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tradeUploadUrl" elementType="Argument">
                <stringProp name="Argument.name">tradeUploadUrl</stringProp>
                <stringProp name="Argument.value">wuat.dcfservice.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="coreName" elementType="Argument">
                <stringProp name="Argument.name">coreName</stringProp>
                <stringProp name="Argument.value">${corpname}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="chainName" elementType="Argument">
                <stringProp name="Argument.name">chainName</stringProp>
                <stringProp name="Argument.value">${chainname}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="documentType" elementType="Argument">
                <stringProp name="Argument.name">documentType</stringProp>
                <stringProp name="Argument.value">${documentType}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="generatorNum" elementType="Argument">
                <stringProp name="Argument.name">generatorNum</stringProp>
                <stringProp name="Argument.value">6</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="token" elementType="Argument">
                <stringProp name="Argument.name">token</stringProp>
                <stringProp name="Argument.value">${__property(requestToken)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">com.iqunxing.qa.apitest.uploadtrade.TradeSign</stringProp>
        </JavaSampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="查询是否转为可融资单据" enabled="false">
          <stringProp name="WhileController.condition"></stringProp>
        </WhileController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询可融资单据" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="定时" enabled="true">
              <stringProp name="ConstantTimer.delay">3600</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="链属企业端登录" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询企业超管手机号" enabled="true">
          <stringProp name="dataSource">MySQL</stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="query">SELECT cellphone FROM dcf_user.qx_user WHERE user_id=(SELECT c.user_id FROM
(SELECT user_id,customer_name FROM dcf_user.qx_user_customer as a  
RIGHT JOIN (SELECT DISTINCT(uc_id) FROM dcf_user.qx_user_role WHERE role_id =&apos;10&apos;) as b
ON a.id = b.uc_id ) as c WHERE c.customer_name=?)</stringProp>
          <stringProp name="queryArguments">${chainname}</stringProp>
          <stringProp name="queryArgumentsTypes">varchar</stringProp>
          <stringProp name="variableNames">chaincellphone</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="链属企业端登录" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;cellphone&quot;:&quot;${chaincellphone_1}&quot;,&quot;password&quot;:&quot;${password}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">HTTP</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/user/v2/public/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="提取链属cookie" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">chain_cookie</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;token&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="设置链属cookie" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters">${corp_cookie}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//string COOKIE_tk=bsh.args[0];
${__setProperty(chain_cookie1,${chain_cookie},)}; 
//${__property(chain_cookie1)}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询企业列表" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;pageNo&quot;:0,&quot;pageSize&quot;:10}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/user/v2/listCustomer</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="设置链属cookie" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${__property(chain_cookie1)}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON 取出链属企业ID" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">chaincustomerId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.customers.content[?(@.customerName==&apos;${chainname}&apos;)].customerId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="Scope.variable"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="切换链属企业" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;customerId&quot;:&quot;${chaincustomerId}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/user/v2/login/switchCustomer</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="设置链属cookie" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${__property(chain_cookie1)}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="链属登陆-申请融资" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="设置初始值" enabled="true">
          <stringProp name="BeanShellSampler.query">vars.put(&quot;select_time&quot;,&quot;0&quot;);
vars.put(&quot;totalRecord&quot;,&quot;0&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="自定义变量值" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="applyNum" elementType="Argument">
              <stringProp name="Argument.name">applyNum</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">申请融资数目</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC 查询链属合同ID" enabled="true">
          <stringProp name="dataSource">MySQL</stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="query">select c.contract_pkey from dcf_contract.t_contract c where c.buyer_name=&apos;${corpname}&apos; and c.seller_name=&apos;${chainname}&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes">varchar</stringProp>
          <stringProp name="variableNames">chainContract_id</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC 查询核心企业ID" enabled="true">
          <stringProp name="dataSource">MySQL</stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="query">select customer_id from dcf_customer.customer where customer_name=&apos;${corpname}&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes">varchar</stringProp>
          <stringProp name="variableNames">corp_id</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="限制查询次数" enabled="true">
          <stringProp name="IfController.condition">${__javaScript(${totalRecord}&lt;${applyNum}&amp;&amp;${select_time}&lt;3)}</stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="查询可融资单据" enabled="true">
            <stringProp name="WhileController.condition">${select_time}&lt;3</stringProp>
          </WhileController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">select_time=vars.get(&quot;select_time&quot;);
log.info(&quot;st----------&quot;+select_time);
int select_time;
select_time= new Long(select_time).intValue();
//int select_time= Integer.valueOf(select_time).intValue();
select_time++;
log.info(&quot;select_time1----------&quot;+select_time);
vars.put(&quot;select_time&quot;,select_time+&quot;&quot;);
select_time=vars.get(&quot;select_time&quot;);

//log.info(&quot;select_time2----------&quot;+select_time);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询可融资单据" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="page_no" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">page_no</stringProp>
                  </elementProp>
                  <elementProp name="page_size" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">20</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">page_size</stringProp>
                  </elementProp>
                  <elementProp name="sort" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sort</stringProp>
                  </elementProp>
                  <elementProp name="order" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">order</stringProp>
                  </elementProp>
                  <elementProp name="sale" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sale</stringProp>
                  </elementProp>
                  <elementProp name="core_contract_ids" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">core_contract_ids</stringProp>
                  </elementProp>
                  <elementProp name="docType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">docType</stringProp>
                  </elementProp>
                  <elementProp name="customer_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${corp_id_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">customer_id</stringProp>
                  </elementProp>
                  <elementProp name="type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">type</stringProp>
                  </elementProp>
                  <elementProp name="coreContractId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">coreContractId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/v1/loan/searchLoanAbleDocType</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="设置链属cookie" enabled="true">
                <collectionProp name="CookieManager.cookies">
                  <elementProp name="tk" elementType="Cookie" testname="tk">
                    <stringProp name="Cookie.value">${__property(chain_cookie1)}</stringProp>
                    <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                    <stringProp name="Cookie.path">/</stringProp>
                    <boolProp name="Cookie.secure">false</boolProp>
                    <longProp name="Cookie.expires">0</longProp>
                    <boolProp name="Cookie.path_specified">true</boolProp>
                    <boolProp name="Cookie.domain_specified">true</boolProp>
                  </elementProp>
                </collectionProp>
                <boolProp name="CookieManager.clearEachIteration">false</boolProp>
              </CookieManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="提取可融资单据数目" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">totalRecord</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.totalRecord</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果有可融资单据" enabled="false">
          <stringProp name="IfController.condition">&quot;${totalRecord}&quot;!=0</stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="解冻合同额度" enabled="false">
            <stringProp name="IncludeController.includepath">D:\JMeter\module\unfreezequota.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="申请融资" enabled="true">
            <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="serverUrl" elementType="Argument">
                  <stringProp name="Argument.name">serverUrl</stringProp>
                  <stringProp name="Argument.value">wuat.dcfservice.com</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="authServerUrl" elementType="Argument">
                  <stringProp name="Argument.name">authServerUrl</stringProp>
                  <stringProp name="Argument.value">localhost:10008</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="corpname" elementType="Argument">
                  <stringProp name="Argument.name">corpname</stringProp>
                  <stringProp name="Argument.value">${corpname}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="corpname_id" elementType="Argument">
                  <stringProp name="Argument.name">corpname_id</stringProp>
                  <stringProp name="Argument.value">${corp_id_1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="chainname" elementType="Argument">
                  <stringProp name="Argument.name">chainname</stringProp>
                  <stringProp name="Argument.value">${chainname}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="orgname" elementType="Argument">
                  <stringProp name="Argument.name">orgname</stringProp>
                  <stringProp name="Argument.value">${orgname}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="contract_Id" elementType="Argument">
                  <stringProp name="Argument.name">contract_Id</stringProp>
                  <stringProp name="Argument.value">${chainContract_id_1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="applyNum" elementType="Argument">
                  <stringProp name="Argument.name">applyNum</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="token" elementType="Argument">
                  <stringProp name="Argument.name">token</stringProp>
                  <stringProp name="Argument.value">${__property(chain_cookie1)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="classname">com.iqunxing.qa.apitest.loan.LoanApply</stringProp>
          </JavaSampler>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询是否申请融资成功" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="page_no" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">page_no</stringProp>
              </elementProp>
              <elementProp name="page_size" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">20</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">page_size</stringProp>
              </elementProp>
              <elementProp name="sort" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sort</stringProp>
              </elementProp>
              <elementProp name="order" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">order</stringProp>
              </elementProp>
              <elementProp name="sale" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sale</stringProp>
              </elementProp>
              <elementProp name="customer_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${corp_id_1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">customer_id</stringProp>
              </elementProp>
              <elementProp name="loan_state" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">loan_state</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v1/loan/list</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="等待单据转换" enabled="true">
            <stringProp name="ConstantTimer.delay">300</stringProp>
          </ConstantTimer>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script"></stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="设置链属cookie" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${__property(chain_cookie1)}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
          <stringProp name="ConstantTimer.delay">10000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="预付进账" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">１</stringProp>
        <stringProp name="ThreadGroup.ramp_time">１</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">只转入一笔单据的预收款</stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询核心企业ID" enabled="true">
          <stringProp name="dataSource">MySQL</stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="query">select customer_id from dcf_customer.customer where customer_name=&apos;${corpname}&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes">varchar</stringProp>
          <stringProp name="variableNames">corpname_id</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询核心合同ID" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">v1/contract/getCoreAndSubContractNum</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="设置核心cookie" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${__P(requestToken,)}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON 查询核心合同ID" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">corpContract_id</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.coreIds[0].coreContractId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="核心合同ID设为全局变量" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters">${corpContract_id}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">${__setProperty(corpContract_id,${corpContract_id},)}; </stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询是否有预付金额" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="customerId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${corpname_id_1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">customerId</stringProp>
              </elementProp>
              <elementProp name="contractId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${corpContract_id}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">contractId</stringProp>
              </elementProp>
              <elementProp name="type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">3</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">type</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/loan/v1/getPaymentDetailByType</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="设置核心cookie" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${__P(requestToken,)}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="取出货款首付待付金额" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">preAmount</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$[0].amount</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="取出回款账户账号" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">accountId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$[0].accountId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">None</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果有预付" enabled="true">
          <stringProp name="IfController.condition">${preAmount}!=0</stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="交行mock充值" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="accountNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${accountId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">accountNo</stringProp>
                </elementProp>
                <elementProp name="accountName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${chainname}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">accountName</stringProp>
                </elementProp>
                <elementProp name="accountBranchName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">交通银行北京市分行</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">accountBranchName</stringProp>
                </elementProp>
                <elementProp name="oppAccNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">645456456456</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">oppAccNo</stringProp>
                </elementProp>
                <elementProp name="oppAccName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${corpname}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">oppAccName</stringProp>
                </elementProp>
                <elementProp name="oppBranchName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">交通银行北京市分行</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">oppBranchName</stringProp>
                </elementProp>
                <elementProp name="oppBankNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">323423</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">oppBankNo</stringProp>
                </elementProp>
                <elementProp name="txnAmt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${preAmount}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">txnAmt</stringProp>
                </elementProp>
                <elementProp name="resume" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">resume</stringProp>
                </elementProp>
                <elementProp name="txnType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">txnType</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">uat1.dcfservice.com</stringProp>
            <stringProp name="HTTPSampler.port">21039</stringProp>
            <stringProp name="HTTPSampler.protocol">HTTP</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">GBK</stringProp>
            <stringProp name="HTTPSampler.path">/citic/savePaymentAccountDetail</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="设置Content-Type" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="暂停" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">3600</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="机构端放款" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">40</stringProp>
        <stringProp name="ThreadGroup.delay">2</stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询核心合同pkey" enabled="true">
          <stringProp name="dataSource">MySQL</stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="query">SELECT contract_pkey FROM dcf_contract.t_contract WHERE sign_customer_name=&apos;${corpname}&apos; AND  institution_name=&apos;${orgname}&apos; AND specificator IS NULL</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">corpContract_pkey</stringProp>
          <stringProp name="resultVariable">result</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="设置customer_ids" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">Object IdResult = vars.getObject(&quot;result&quot;).get(0).get(&quot;customer_id&quot;);
log.info(&quot;IdResult ：&quot;+IdResult);
 
vars.put(&quot;ids&quot;,&quot;[\&quot;&quot;+IdResult+&quot;\&quot;]&quot;);
//String a = vars.get(&quot;ids&quot;);
//log.info(&quot;ids  &quot;+a);
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询链属合同pkey" enabled="true">
          <stringProp name="dataSource">MySQL</stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="query">SELECT contract_pkey FROM dcf_contract.t_contract WHERE parent_contract_id=&apos;${corpContract_pkey_1}&apos; AND seller_name=&apos;${chainname}&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">chainContract_pkey</stringProp>
          <stringProp name="resultVariable">result</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="设置customer_ids" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">Object IdResult = vars.getObject(&quot;result&quot;).get(0).get(&quot;customer_id&quot;);
log.info(&quot;IdResult ：&quot;+IdResult);
 
vars.put(&quot;ids&quot;,&quot;[\&quot;&quot;+IdResult+&quot;\&quot;]&quot;);
//String a = vars.get(&quot;ids&quot;);
//log.info(&quot;ids  &quot;+a);
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="while_count初始化" enabled="true">
          <stringProp name="BeanShellSampler.query">vars.put(&quot;max_while_count&quot;,&quot;3&quot;);//定义查询最大次数
vars.put(&quot;Fwhile_count&quot;,&quot;0&quot;);//定义风控审批查询的初始化次数
vars.put(&quot;Fcount&quot;,&quot;0&quot;);//定义风控审批条数初始化值
B = vars.get(&quot;Fwhile_count&quot;);
log.info(&quot;Fwhile_count=========-----&quot;+B);
vars.put(&quot;Cwhile_count&quot;,&quot;0&quot;);//定义财务审批查询的舒初始化次数
vars.put(&quot;Ccount&quot;,&quot;0&quot;);//定义财务审批条数初始化值

Fcount= vars.get(&quot;Fcount&quot;);
log.info(&quot;Fcount+++++++++++++++++++&quot;+Fcount);
vars.put(&quot;apkid&quot;,&quot;0&quot;);

</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC 查询链属ID" enabled="true">
          <stringProp name="dataSource">MySQL</stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="query">select customer_id from dcf_customer.customer where customer_name=?</stringProp>
          <stringProp name="queryArguments">${chainname}</stringProp>
          <stringProp name="queryArgumentsTypes">varchar</stringProp>
          <stringProp name="variableNames">chain_id</stringProp>
          <stringProp name="resultVariable">result</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="设置customer_ids" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">Object IdResult = vars.getObject(&quot;result&quot;).get(0).get(&quot;customer_id&quot;);
log.info(&quot;IdResult ：&quot;+IdResult);
 
vars.put(&quot;ids&quot;,&quot;[\&quot;&quot;+IdResult+&quot;\&quot;]&quot;);
//String a = vars.get(&quot;ids&quot;);
//log.info(&quot;ids  &quot;+a);
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询企业超管手机号" enabled="true">
          <stringProp name="dataSource">MySQL</stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="query">SELECT cellphone FROM dcf_user.qx_user WHERE user_id=(SELECT c.user_id FROM
(SELECT user_id,customer_name FROM dcf_user.qx_user_customer as a  
RIGHT JOIN (SELECT DISTINCT(uc_id) FROM dcf_user.qx_user_role WHERE role_id =&apos;10&apos;) as b
ON a.id = b.uc_id ) as c WHERE c.customer_name=? LIMIT 0,1)</stringProp>
          <stringProp name="queryArguments">${orgname}</stringProp>
          <stringProp name="queryArgumentsTypes">varchar</stringProp>
          <stringProp name="variableNames">orgcellphone</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="机构企业端登录" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;cellphone&quot;:&quot;${orgcellphone_1}&quot;,&quot;password&quot;:&quot;${password}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">HTTP</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/user/v2/public/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="提取cookie" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">org_cookie</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;token&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询企业列表" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;pageNo&quot;:0,&quot;pageSize&quot;:10}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/user/v2/listCustomer</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="设置机构cookie" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${org_cookie}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON 取出机构ID" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">customerId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.customers.content[?(@.customerName==&apos;${orgname}&apos;)].customerId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="Scope.variable"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="切换机构" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;customerId&quot;:&quot;${customerId}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/user/v2/login/switchCustomer</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="设置机构cookie" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${org_cookie}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
        </hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="循环查询是否到达风控审批" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(${Fwhile_count}&lt;${max_while_count}&amp;&amp;${Fcount}&lt;1)}</stringProp>
          <stringProp name="TestPlan.comments">防止死循环，控制查询次数</stringProp>
        </WhileController>
        <hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="设置机构cookie" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${org_cookie}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">获取机构token</stringProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="是否到达风控审批" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="state" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">state</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">HTTP</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/v1/operation/assetpackage/selectInstCoreCount</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON提取待审批单据数目" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">num</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result[?(@.name==&apos;${corpname}&apos;)].count</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="更新风控审批条数" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">num = vars.get(&quot;num&quot;);
//Fcount= vars.get(&quot;Fcount&quot;);
vars.put(&quot;Fcount&quot;,num);//更新
Fcount= vars.get(&quot;Fcount&quot;);
log.info(&quot;Fcount+++++++++++++++++++&quot;+Fcount);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="风控while_count++" enabled="true">
            <stringProp name="BeanShellSampler.query">Fwhile_count=vars.get(&quot;Fwhile_count&quot;);
int while_count_int= new Long(Fwhile_count).intValue();
while_count_int++;
vars.put(&quot;Fwhile_count&quot;,while_count_int+&quot;&quot;);
log.info(&quot;Fwhile_count_int=========-----&quot;+while_count_int);
vars.get(&quot;Fcount&quot;);
log.info(&quot;Fcount+++++++&quot;+Fcount);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果有可风控审批单据" enabled="true">
          <stringProp name="TestPlan.comments">上一步如果有可审批单据则执行</stringProp>
          <stringProp name="IfController.condition">${Fcount}&gt;0</stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="设置机构cookie" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${org_cookie}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">获取机构token</stringProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询资产包编号" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="customer_ids" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${ids}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">customer_ids</stringProp>
                </elementProp>
                <elementProp name="state" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">state</stringProp>
                </elementProp>
                <elementProp name="loan_amount_end" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">loan_amount_end</stringProp>
                </elementProp>
                <elementProp name="loan_amount_start" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">loan_amount_start</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v1/institution/assetpackag/findPackageByCustomerId</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="ids" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">String a = vars.get(&quot;ids&quot;);
vars.put(&quot;ids&quot;,a);
log.info(&quot;ids  &quot;+a);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON 提取资产包编号" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">assetid1;assetid2</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result[0].id;$.result[1].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Scope.variable"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">0;0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell 资产包编号列表" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">//Object A = vars.getObject(&quot;result&quot;).get(0).get(&quot;id&quot;);
//Object B = vars.getObject(&quot;result&quot;).get(1).get(&quot;id&quot;);


${__setProperty(assetid_1,${assetid1},)}
${__setProperty(assetid_2,${assetid2},)}
String A = vars.get(&quot;assetid1&quot;);
String B = vars.get(&quot;assetid2&quot;);
vars.put(&quot;Aid&quot;,&quot;[\&quot;&quot;+A+&quot;\&quot;,\&quot;&quot;+B+&quot;\&quot;]&quot;);
//vars.put(&quot;Aid&quot;,&quot;[\&quot;&quot;+A+&quot;\&quot;]&quot;);
String pageid = vars.get(&quot;Aid&quot;);
log.info(&quot;这是获取到的值-----&quot;+pageid);
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="检查获取可审批的资产包" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="assetPackageIds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${assetid1},${assetid2}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">assetPackageIds</stringProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v1/institution/checkAssetPackages</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="提取资产包返回结果" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">last_check_result_json</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="机构风控审批通过" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="asset_package_ids" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${assetid1},${assetid2}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">asset_package_ids</stringProp>
                </elementProp>
                <elementProp name="last_check_result_json" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${last_check_result_json}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">last_check_result_json</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">v1/institution/agreeApprovalAssetPackages</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="设置content-type" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询放款户托管方式" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">HTTP</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/v1/contract/gainAccountContractVO</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="设置机构cookie" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${org_cookie}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1206817697">{&quot;ret&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="取出放款户托管方式" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">platformAccountFlag</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.result[?( ${corpContract_pkey_1} in @.coreContractIds)].platformAccountFlag</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="线上放款" enabled="true">
          <stringProp name="IfController.condition">${platformAccountFlag} == 1</stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="查询财务审批单据" enabled="true">
            <stringProp name="WhileController.condition">${__javaScript(${Cwhile_count}&lt;${max_while_count}&amp;&amp;${apkid}&lt;&quot;1&quot;)}
//${__javaScript(${Fwhile_count}&lt;${max_while_count}&amp;&amp;${Fcount}&lt;1)}</stringProp>
            <stringProp name="TestPlan.comments">一次只审批两条单据</stringProp>
          </WhileController>
          <hashTree>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="设置机构cookie" enabled="true">
              <collectionProp name="CookieManager.cookies">
                <elementProp name="tk" elementType="Cookie" testname="tk">
                  <stringProp name="Cookie.value">${org_cookie}</stringProp>
                  <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                  <stringProp name="Cookie.path">/</stringProp>
                  <boolProp name="Cookie.secure">false</boolProp>
                  <longProp name="Cookie.expires">0</longProp>
                  <boolProp name="Cookie.path_specified">true</boolProp>
                  <boolProp name="Cookie.domain_specified">true</boolProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">获取机构token</stringProp>
              <boolProp name="CookieManager.clearEachIteration">false</boolProp>
            </CookieManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询财务审批单据" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="asset_package_state" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">6</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">asset_package_state</stringProp>
                  </elementProp>
                  <elementProp name="core_contract_ids" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${corpContract_pkey_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">core_contract_ids</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/v1/institution/assetpackag/getOfferLoanAssetpackagesAll</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON 提取财务审批信息" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">assetPackageIds</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.result[0].assetPackageIds</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="财务while_count++" enabled="true">
              <stringProp name="BeanShellSampler.query">apkids = vars.get(&quot;assetPackageIds&quot;);
vars.put(&quot;apkids&quot;,apkids);
apkids=vars.get(&quot;apkids&quot;);
log.info(&quot;apkids---------------------&quot;+apkids);

if (apkids == &quot;&quot;)
{
	vars.put(&quot;apkid&quot;,&quot;0&quot;);
	apkid=vars.get(&quot;apkid&quot;);
	
}
else
{
	vars.put(&quot;apkid&quot;,&quot;1&quot;);
	apkid = vars.get(&quot;apkid&quot;);
	log.info(&quot;apkid---------------------&quot;+apkid);
	
	apkid=apkids.split(&quot;,&quot;);
	ap1=apkid[0];
	ap2=apkid[1];
	log.info(&quot;ap1-------------------&quot;+ap1);
	log.info(&quot;ap2-------------------&quot;+ap2);
	vars.put(&quot;apks&quot;,&quot;[\&quot;&quot;+ap1+&quot;\&quot;,\&quot;&quot;+ap2+&quot;\&quot;]&quot;);
	ap=vars.get(&quot;apks&quot;);
	log.info(&quot;ap-------------------&quot;+ap);
}


Cwhile_count=vars.get(&quot;Cwhile_count&quot;);
int while_count_int= new Long(Cwhile_count).intValue();
while_count_int++;
vars.put(&quot;Cwhile_count&quot;,while_count_int+&quot;&quot;);
log.info(&quot;Cwhile_count_int-----------------&quot;+while_count_int);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="等待3600ms" enabled="true">
              <stringProp name="ConstantTimer.delay">3600</stringProp>
            </ConstantTimer>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="有待放款资产包放款" enabled="true">
              <stringProp name="IfController.condition">${apkid} !=0</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="财务审批通过" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="assetPackageIds" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">${ap}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">assetPackageIds</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/v1/institution/financeLendingPass</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="pageids" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">String aps = vars.get(&quot;apks&quot;);
log.info(&quot;aps----------  &quot;+aps);
vars.put(&quot;ap&quot;,aps);
//vars.put();</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="审批是否成功" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">apkid=vars.get(&quot;apkid&quot;);
vars.put(&quot;apkid&quot;,apkid);
apkid=vars.get(&quot;apkid&quot;);
log.info(&quot;apkid----------&quot;+apkid);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="线下放款" enabled="true">
          <stringProp name="IfController.condition">${platformAccountFlag} == 0</stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="uploadBankStatement" elementType="Argument">
                <stringProp name="Argument.name">uploadBankStatement</stringProp>
                <stringProp name="Argument.value">D:/apache-jmeter-4.0/JMeter/attachment/上传流水模板.xlsx</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="assetid_1" elementType="Argument">
                <stringProp name="Argument.name">assetid_1</stringProp>
                <stringProp name="Argument.value">${__property(assetid_1)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="assetid_1" elementType="Argument">
                <stringProp name="Argument.name">assetid_1</stringProp>
                <stringProp name="Argument.value">${__property(assetid_2)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询核心合同放款户" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="contract_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${corpContract_pkey_1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">contract_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v1/contract/details</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
              <collectionProp name="CookieManager.cookies">
                <elementProp name="tk" elementType="Cookie" testname="tk">
                  <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                  <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                  <stringProp name="Cookie.path">/</stringProp>
                  <boolProp name="Cookie.secure">false</boolProp>
                  <longProp name="Cookie.expires">0</longProp>
                  <boolProp name="Cookie.path_specified">true</boolProp>
                  <boolProp name="Cookie.domain_specified">true</boolProp>
                </elementProp>
              </collectionProp>
              <boolProp name="CookieManager.clearEachIteration">false</boolProp>
            </CookieManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49">1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="匹配放款户银行账号" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">lend_accountNo</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.contract.institutionLendAccount.accountNo</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="匹配放款户名称" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">lend_accountName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.contract.institutionLendAccount.accountName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="匹配放款户银行分行" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">lend_branchBank</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.contract.institutionLendAccount.branchBank</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询链属合同融资户" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="contract_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${chainContract_pkey_1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">contract_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v1/contract/details</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
              <collectionProp name="CookieManager.cookies">
                <elementProp name="tk" elementType="Cookie" testname="tk">
                  <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                  <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                  <stringProp name="Cookie.path">/</stringProp>
                  <boolProp name="Cookie.secure">false</boolProp>
                  <longProp name="Cookie.expires">0</longProp>
                  <boolProp name="Cookie.path_specified">true</boolProp>
                  <boolProp name="Cookie.domain_specified">true</boolProp>
                </elementProp>
              </collectionProp>
              <boolProp name="CookieManager.clearEachIteration">false</boolProp>
            </CookieManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49">1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="匹配融资户银行账号" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">loan_accountNo</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.contract.loanAccount.accountNo</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="匹配融资户名称" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">loan_accountName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.contract.loanAccount.accountName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="匹配融资户银行分行" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">loan_branchBank</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.contract.loanAccount.branchBank</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
            <stringProp name="ForeachController.inputVal">assetid_1</stringProp>
            <stringProp name="ForeachController.returnVal">assetid</stringProp>
            <boolProp name="ForeachController.useSeparator">false</boolProp>
          </ForeachController>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询资产包对应的LA编号" enabled="true">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT loan_application_id FROM dcf_loan.t_asset_package_loan_application_association WHERE asset_package_id =&quot;${assetid}&quot; ;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">loan_application_id</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询LA编号对应的LD单据编号和融资金额" enabled="false">
            <stringProp name="dataSource">MySQL</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT loan_document_id,apply_amount FROM dcf_loan.t_loan_application WHERE loan_application_id = &quot;${loan_application_id_1}&quot;;
</stringProp>
            <stringProp name="queryArguments">${loan_application_id_1}</stringProp>
            <stringProp name="queryArgumentsTypes">varchar</stringProp>
            <stringProp name="variableNames">loan_document_id,apply_amount</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="放款流水模板" enabled="false">
            <stringProp name="BeanShellSampler.query">import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;

import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.util.Calendar;
import java.util.Date;

public static String  FILE_PATH=&quot;${uploadBankStatement}&quot;;
		

XSSFWorkbook workbook = null;
InputStream inputStream=null;

Calendar cal = Calendar.getInstance();//设置放款时间
Date nowDate = cal.getTime();

try
{
    //读取Excel文件
	inputStream= new FileInputStream(FILE_PATH);
	workbook = new XSSFWorkbook(inputStream);
	inputStream.close();
} 
catch (Exception e)
{
    e.printStackTrace();
}

for (int numSheet = 0; numSheet &lt; workbook.getNumberOfSheets(); numSheet++) 
{
    workbook.getSheetAt(numSheet);
}

XSSFSheet sheet = workbook.getSheetAt(0);
if (sheet != null)
{
    // 循环行
    for (int rowNum = 1; rowNum &lt;= 1; rowNum++) 
	{
        XSSFRow row = sheet.getRow(rowNum);
        if (row == null)
		{
            continue;// 忽略并继续读取
        }
        XSSFCell cell = row.getCell(1);
        cell.setCellValue(&quot;${lend_accountName}&quot;);//放款户名称
        System.out.println(&quot;cell.getStringCellValue1():&quot; + cell.getStringCellValue());
       
        
        cell = row.getCell(2);
        cell.setCellValue(&quot;${lend_accountNo}&quot;);//放款户账号
        System.out.println(&quot;cell.getStringCellValue2():&quot; + cell.getStringCellValue());
       
        cell = row.getCell(3);
        cell.setCellValue(&quot;${lend_branchBank}&quot;);//放款户银行支行
        System.out.println(&quot;cell.getStringCellValue3():&quot; + cell.getStringCellValue());
       
        cell = row.getCell(4);
        cell.setCellValue(&quot;${loan_accountName}&quot;);//融资户名称
        System.out.println(&quot;cell.getStringCellValue4():&quot; + cell.getStringCellValue());
        
        cell = row.getCell(5);
        cell.setCellValue(&quot;${loan_accountNo}&quot;);//融资户账号
        System.out.println(&quot;cell.getStringCellValue5():&quot; + cell.getStringCellValue());
        
        cell = row.getCell(6);
        cell.setCellValue(&quot;${loan_branchBank}&quot;);//融资户银行支行
        System.out.println(&quot;cell.getStringCellValue6():&quot; + cell.getStringCellValue());
        
        cell = row.getCell(7);
        cell.setCellValue(&quot;${apply_amount_1}&quot;);//可融资金额
        System.out.println(&quot;cell.getStringCellValue7():&quot; + cell.getStringCellValue());
        
        cell = row.getCell(8);
        cell.setCellValue(&quot;${loan_document_id_1}&quot;);//单据编号
        System.out.println(&quot;cell.getStringCellValue8():&quot; + cell.getStringCellValue());
        
        cell = row.getCell(9);
        cell.setCellValue(nowDate);//放款时间
        //System.out.println(&quot;cell.getStringCellValue9():&quot; + cell.getStringCellValue());
   }
}
				
try 
{
	FileOutputStream fis = new FileOutputStream(FILE_PATH);
	workbook.write(fis);
	fis.close();

} 
catch (IOException e) 
{
	// TODO Auto-generated catch block
	e.printStackTrace();
}
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">3000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传线下放款流水" enabled="false">
            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
              <collectionProp name="HTTPFileArgs.files">
                <elementProp name="${uploadBankStatement}" elementType="HTTPFileArg">
                  <stringProp name="File.path">${uploadBankStatement}</stringProp>
                  <stringProp name="File.paramname">file</stringProp>
                  <stringProp name="File.mimetype">application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/loan/v1/uploadBankStatement</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
              <collectionProp name="CookieManager.cookies">
                <elementProp name="tk" elementType="Cookie" testname="tk">
                  <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                  <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                  <stringProp name="Cookie.path">/</stringProp>
                  <boolProp name="Cookie.secure">false</boolProp>
                  <longProp name="Cookie.expires">0</longProp>
                  <boolProp name="Cookie.path_specified">true</boolProp>
                  <boolProp name="Cookie.domain_specified">true</boolProp>
                </elementProp>
              </collectionProp>
              <boolProp name="CookieManager.clearEachIteration">false</boolProp>
            </CookieManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2914">[]</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="验证放款流水是否上传成功" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;pageNo&quot;:0,&quot;pageSize&quot;:10,&quot;loanDocumentId&quot;:&quot;${loan_document_id_1}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/loan/v1/getBankStatement</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
              <collectionProp name="CookieManager.cookies">
                <elementProp name="tk" elementType="Cookie" testname="tk">
                  <stringProp name="Cookie.value">${__P(uat_cookie)}</stringProp>
                  <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                  <stringProp name="Cookie.path">/</stringProp>
                  <boolProp name="Cookie.secure">false</boolProp>
                  <longProp name="Cookie.expires">0</longProp>
                  <boolProp name="Cookie.path_specified">true</boolProp>
                  <boolProp name="Cookie.domain_specified">true</boolProp>
                </elementProp>
              </collectionProp>
              <boolProp name="CookieManager.clearEachIteration">false</boolProp>
            </CookieManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1753747938">{&quot;content&quot;:[{&quot;bankAccountName&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">3000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>true</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <fileName>true</fileName>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="还款" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询链属ID(2)" enabled="true">
          <stringProp name="dataSource">MySQL</stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="query">select customer_id from dcf_customer.customer where customer_name=&apos;${chainname}&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">chainname_id</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询可还款单据" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="pageNo" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">pageNo</stringProp>
              </elementProp>
              <elementProp name="sellerCustomerId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${chainname_id_1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">sellerCustomerId</stringProp>
              </elementProp>
              <elementProp name="pageSize" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">pageSize</stringProp>
              </elementProp>
              <elementProp name="loanState" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">loanState</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v1/rawdoc/getRepaymentAraps</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="设置核心cookie" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${__P(requestToken,)}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Json还款单据数目" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">totalRecord</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.totalRecord</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Json还款单据ID集合（未提交还款申请）" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">arapid</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.results[?(@.checkRepaymenting ==0)].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="查询核心合同pkey" enabled="true">
          <stringProp name="dataSource">MySQL</stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="query">SELECT contract_pkey FROM dcf_contract.t_contract WHERE sign_customer_name=&apos;${corpname}&apos; AND  institution_name=&apos;${orgname}&apos; </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">corpContract_pkey</stringProp>
          <stringProp name="resultVariable">result</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="设置customer_ids" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">Object IdResult = vars.getObject(&quot;result&quot;).get(0).get(&quot;customer_id&quot;);
log.info(&quot;IdResult ：&quot;+IdResult);
 
vars.put(&quot;ids&quot;,&quot;[\&quot;&quot;+IdResult+&quot;\&quot;]&quot;);
//String a = vars.get(&quot;ids&quot;);
//log.info(&quot;ids  &quot;+a);
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="如果有可还款单据" enabled="true">
          <stringProp name="IfController.condition">&quot;${totalRecord}&quot;!=0</stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="设置核心cookie" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="tk" elementType="Cookie" testname="tk">
                <stringProp name="Cookie.value">${__P(requestToken,)}</stringProp>
                <stringProp name="Cookie.domain">.dcfservice.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="返回还款单据详情" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="arapIds" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${arapid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">arapIds</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v1/loan/return/getReturnDetailsForArap</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="设置content-type" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="loanDocumentId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">loanDocumentId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.returnDocuments[0].loanDocumentId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="amount" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">amount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.returnAmounts[0].amount</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">${__setProperty(pay_amount,${amount},)}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询还款方式" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="contractId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${corpContract_pkey_1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">contractId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/loan/v1/getPaymentMode</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">PaymentMode</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="线下还款" enabled="true">
            <stringProp name="IfController.condition">${PaymentMode}==1</stringProp>
            <boolProp name="IfController.evaluateAll">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="申请还款" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;arapId&quot;:&quot;${arapid}&quot;}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/loan/v1/offlineRepayment/assignForOfflineRepayment</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="在线还款" enabled="true">
            <stringProp name="IfController.condition">${PaymentMode}==0</stringProp>
            <boolProp name="IfController.evaluateAll">true</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC 查询余额" enabled="true">
              <stringProp name="dataSource">MySQL</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">SELECT AVAILABLE_BALANCE/10000,ID FROM dcf_account.t_account WHERE ACCOUNT_NAME=&apos;${corpname}&apos;AND ACCOUNT_TYPE !=12 ORDER BY AVAILABLE_BALANCE DESC LIMIT 1
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes">varchar</stringProp>
              <stringProp name="variableNames">available_balance,payment_account</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="充值" enabled="true">
              <stringProp name="IfController.condition">${available_balance_1}&lt;${amount}</stringProp>
              <boolProp name="IfController.evaluateAll">true</boolProp>
            </IfController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
                <stringProp name="BeanShellSampler.query">String re_amount = vars.get(&quot;amount&quot;);
vars.put(&quot;pay_amount&quot;,re_amount);
log.info(&quot;re_amount-------------&quot;+re_amount);
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="rise_amount" elementType="Argument">
                    <stringProp name="Argument.name">rise_amount</stringProp>
                    <stringProp name="Argument.value">${__property(pay_amount)}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="accountname" elementType="Argument">
                    <stringProp name="Argument.name">accountname</stringProp>
                    <stringProp name="Argument.value">${corpname}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </Arguments>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Controller" enabled="true">
                <stringProp name="IncludeController.includepath">D:\JMeter\module\payrise.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="创建还款订单" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="requestId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${requestId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">requestId</stringProp>
                  </elementProp>
                  <elementProp name="source" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">source</stringProp>
                  </elementProp>
                  <elementProp name="subject" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">subject</stringProp>
                  </elementProp>
                  <elementProp name="content" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">${content}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">content</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/v1/loan/repayment/createCashierOrder</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="设置content-type" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="获取当前时间转为时间戳" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">String date = &quot;${__time(,)}&quot;;
vars.put(&quot;requestId&quot;,&quot;ry&quot;+date);
String requestId = vars.get(&quot;requestId&quot;);
log.info(&quot;===============&quot;+requestId);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="content" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">loanDocumentId=vars.get(&quot;loanDocumentId&quot;);
amount=vars.get(&quot;amount&quot;);
vars.put(&quot;content&quot;,&quot;{\&quot;&quot;+loanDocumentId+&quot;\&quot;:&quot;+&quot;\&quot;&quot;+amount+&quot;\&quot;}&quot;);
content=vars.get(&quot;content&quot;);
log.info(&quot;%%%%%%%%%%%%%%%%%%%%%%&quot;+content);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON获取订单编号" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">cashierId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.result.cashierId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="申请还款" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="payment_account" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${payment_account_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">payment_account</stringProp>
                  </elementProp>
                  <elementProp name="payment_channel" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">payment_channel</stringProp>
                  </elementProp>
                  <elementProp name="payment_bank" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">payment_bank</stringProp>
                  </elementProp>
                  <elementProp name="profile_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">profile_id</stringProp>
                  </elementProp>
                  <elementProp name="id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${cashierId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">id</stringProp>
                  </elementProp>
                  <elementProp name="customer_known" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">customer_known</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/cashier/pay</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="设置content-type" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
